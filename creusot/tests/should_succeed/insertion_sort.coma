
module T_core__cmp__Ordering
  type t_Ordering  =
    | C_Less
    | C_Equal
    | C_Greater
  
  function any_l (_ : 'b) : 'a
  
  let rec v_Less (input:t_Ordering) (ret  )= any
    [ good -> {C_Less  = input} (! ret) | bad -> {C_Less  <> input} (! {false} any) ]
    
  
  let rec v_Equal (input:t_Ordering) (ret  )= any
    [ good -> {C_Equal  = input} (! ret) | bad -> {C_Equal  <> input} (! {false} any) ]
    
  
  let rec v_Greater (input:t_Ordering) (ret  )= any
    [ good -> {C_Greater  = input} (! ret) | bad -> {C_Greater  <> input} (! {false} any) ]
    
end
module T_core__ops__range__Range
  type t_Range 'idx =
    | C_Range 'idx 'idx
  
  function any_l (_ : 'b) : 'a
  
  let rec t_Range < 'idx > (input:t_Range 'idx) (ret  (start:'idx) (end':'idx))= any
    [ good (start:'idx) (end':'idx)-> {C_Range start end' = input} (! ret {start} {end'}) ]
    
  
  function t_Range__end (self : t_Range 'idx) : 'idx =
    match self with
      | C_Range _ a -> a
      end
  
  function t_Range__start (self : t_Range 'idx) : 'idx =
    match self with
      | C_Range a _ -> a
      end
end
module T_core__option__Option
  type t_Option 't =
    | C_None
    | C_Some 't
  
  function any_l (_ : 'b) : 'a
  
  let rec v_None < 't > (input:t_Option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} (! {false} any) ]
    
  
  let rec v_Some < 't > (input:t_Option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : 't [C_Some field_0 : t_Option 't] . C_Some field_0 <> input} (! {false} any) ]
    
end
module T_alloc__alloc__Global
  type t_Global  =
    | C_Global
  
  function any_l (_ : 'b) : 'a
  
  let rec t_Global (input:t_Global) (ret  )= any [ good -> {C_Global  = input} (! ret) ] 
end
module M_insertion_sort__insertion_sort [#"../insertion_sort.rs" 21 0 21 40]
  let%span sinsertion_sort0 = "../insertion_sort.rs" 22 19 22 35
  let%span sinsertion_sort1 = "../insertion_sort.rs" 27 13 27 14
  let%span sinsertion_sort2 = "../insertion_sort.rs" 24 4 24 61
  let%span sinsertion_sort3 = "../insertion_sort.rs" 24 4 24 61
  let%span sinsertion_sort4 = "../insertion_sort.rs" 24 4 24 61
  let%span sinsertion_sort5 = "../insertion_sort.rs" 24 16 24 59
  let%span sinsertion_sort6 = "../insertion_sort.rs" 25 16 25 34
  let%span sinsertion_sort7 = "../insertion_sort.rs" 24 4 24 61
  let%span sinsertion_sort8 = "../insertion_sort.rs" 29 20 29 26
  let%span sinsertion_sort9 = "../insertion_sort.rs" 30 20 30 38
  let%span sinsertion_sort10 = "../insertion_sort.rs" 29 8 29 28
  let%span sinsertion_sort11 = "../insertion_sort.rs" 34 18 34 19
  let%span sinsertion_sort12 = "../insertion_sort.rs" 35 25 35 26
  let%span sinsertion_sort13 = "../insertion_sort.rs" 35 15 35 27
  let%span sinsertion_sort14 = "../insertion_sort.rs" 35 30 35 38
  let%span sinsertion_sort15 = "../insertion_sort.rs" 36 31 36 32
  let%span sinsertion_sort16 = "../insertion_sort.rs" 40 17 40 18
  let%span sinsertion_sort17 = "../insertion_sort.rs" 44 18 44 55
  let%span sinsertion_sort18 = "../insertion_sort.rs" 19 0 19 44
  let%span sinsertion_sort19 = "../insertion_sort.rs" 20 10 20 27
  let%span span20 = "../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  let%span span21 = "../../../../creusot-contracts/src/logic/seq.rs" 198 8 198 97
  let%span span22 = "" 0 0 0 0
  let%span span23 = "../../../../creusot-contracts/src/std/slice.rs" 29 14 29 41
  let%span span24 = "../../../../creusot-contracts/src/std/slice.rs" 30 14 30 42
  let%span span25 = "../../../../creusot-contracts/src/std/slice.rs" 18 20 18 30
  let%span span26 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span span27 = "../../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  let%span span28 = "../../../../creusot-contracts/src/std/num.rs" 22 16 22 35
  let%span span29 = "../../../../creusot-contracts/src/std/iter/range.rs" 22 8 28 9
  let%span span30 = "../../../../creusot-contracts/src/std/iter/range.rs" 39 15 39 21
  let%span span31 = "../../../../creusot-contracts/src/std/iter/range.rs" 40 15 40 21
  let%span span32 = "../../../../creusot-contracts/src/std/iter/range.rs" 41 15 41 21
  let%span span33 = "../../../../creusot-contracts/src/std/iter/range.rs" 42 15 42 32
  let%span span34 = "../../../../creusot-contracts/src/std/iter/range.rs" 43 15 43 32
  let%span span35 = "../../../../creusot-contracts/src/std/iter/range.rs" 44 14 44 42
  let%span span36 = "../../../../creusot-contracts/src/std/iter/range.rs" 33 15 33 24
  let%span span37 = "../../../../creusot-contracts/src/std/iter/range.rs" 34 14 34 45
  let%span span38 = "../insertion_sort.rs" 7 4 9 5
  let%span span39 = "../insertion_sort.rs" 15 8 15 35
  let%span span40 = "../../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  let%span span41 = "../../../../creusot-contracts/src/model.rs" 108 8 108 31
  let%span span42 = "../../../../creusot-contracts/src/std/slice.rs" 261 19 261 35
  let%span span43 = "../../../../creusot-contracts/src/std/slice.rs" 262 19 262 35
  let%span span44 = "" 0 0 0 0
  let%span span45 = "../../../../creusot-contracts/src/std/slice.rs" 263 8 263 52
  let%span span46 = "../../../../creusot-contracts/src/logic/ops.rs" 53 8 53 32
  let%span span47 = "../../../../creusot-contracts/src/logic/ops.rs" 42 8 42 31
  let%span span48 = "../../../../creusot-contracts/src/std/iter/range.rs" 15 12 15 78
  let%span span49 = "" 0 0 0 0
  let%span span50 = "../../../../creusot-contracts/src/std/iter.rs" 105 26 108 17
  let%span span51 = "" 0 0 0 0
  let%span span52 = "../../../../creusot-contracts/src/logic/seq.rs" 120 8 120 37
  let%span span53 = "../../../../creusot-contracts/src/model.rs" 90 8 90 31
  let%span span54 = "../../../../creusot-contracts/src/snapshot.rs" 27 20 27 48
  let%span span55 = "../../../../creusot-contracts/src/std/iter.rs" 90 8 90 19
  let%span span56 = "../../../../creusot-contracts/src/std/iter.rs" 84 20 84 24
  let%span span57 = "../../../../creusot-contracts/src/std/iter.rs" 99 0 212 1
  let%span span58 = "" 0 0 0 0
  let%span span59 = "" 0 0 0 0
  let%span span60 = "" 0 0 0 0
  let%span span61 = "../../../../creusot-contracts/src/std/slice.rs" 249 0 358 1
  
  use prelude.prelude.Int32
  
  predicate inv'11 (_1 : int32)
  
  axiom inv'11 [@rewrite] : forall x : int32 [inv'11 x] . inv'11 x = true
  
  use T_alloc__alloc__Global as Global'0
  
  predicate invariant'10 (self : int32) =
    [%#span20] inv'11 self
  
  predicate inv'10 (_1 : int32)
  
  axiom inv'10 [@rewrite] : forall x : int32 [inv'10 x] . inv'10 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  predicate invariant'9 (self : Seq.seq int32) =
    [%#span21] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'10 (Seq.get self i)
  
  predicate inv'9 (_1 : Seq.seq int32)
  
  axiom inv'9 [@rewrite] : forall x : Seq.seq int32 [inv'9 x] . inv'9 x = true
  
  use prelude.prelude.UIntSize
  
  predicate inv'8 (_1 : usize)
  
  axiom inv'8 [@rewrite] : forall x : usize [inv'8 x] . inv'8 x = true
  
  use prelude.prelude.Slice
  
  use prelude.prelude.Slice
  
  use prelude.prelude.UIntSize
  
  constant v_MAX'0 : usize = [%#span22] (18446744073709551615 : usize)
  
  function shallow_model'2 (self : slice int32) : Seq.seq int32
  
  axiom shallow_model'2_spec : forall self : slice int32 . ([%#span24] shallow_model'2 self = Slice.id self)
  && ([%#span23] Seq.length (shallow_model'2 self) <= UIntSize.to_int (v_MAX'0 : usize))
  
  predicate invariant'7 (self : slice int32) =
    [%#span25] inv'9 (shallow_model'2 self)
  
  predicate inv'7 (_1 : slice int32)
  
  axiom inv'7 [@rewrite] : forall x : slice int32 [inv'7 x] . inv'7 x = true
  
  predicate invariant'6 (self : usize) =
    [%#span20] inv'8 self
  
  predicate inv'6 (_1 : usize)
  
  axiom inv'6 [@rewrite] : forall x : usize [inv'6 x] . inv'6 x = true
  
  use prelude.prelude.Borrow
  
  predicate invariant'5 (self : borrowed (slice int32)) =
    [%#span26] inv'7 self.current /\ inv'7 self.final
  
  predicate inv'5 (_1 : borrowed (slice int32))
  
  axiom inv'5 [@rewrite] : forall x : borrowed (slice int32) [inv'5 x] . inv'5 x = true
  
  use T_core__option__Option as Option'0
  
  predicate inv'4 (_1 : Option'0.t_Option usize)
  
  axiom inv'4 [@rewrite] : forall x : Option'0.t_Option usize [inv'4 x] . inv'4 x = true
  
  use T_core__ops__range__Range as Range'0
  
  predicate inv'1 (_1 : Range'0.t_Range usize)
  
  predicate invariant'3 (self : borrowed (Range'0.t_Range usize)) =
    [%#span26] inv'1 self.current /\ inv'1 self.final
  
  predicate inv'3 (_1 : borrowed (Range'0.t_Range usize))
  
  axiom inv'3 [@rewrite] : forall x : borrowed (Range'0.t_Range usize) [inv'3 x] . inv'3 x = true
  
  predicate invariant'2 (self : slice int32) =
    [%#span27] inv'7 self
  
  predicate inv'2 (_1 : slice int32)
  
  axiom inv'2 [@rewrite] : forall x : slice int32 [inv'2 x] . inv'2 x = true
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  use seq.Seq
  
  function deep_model'0 (self : usize) : int =
    [%#span28] UIntSize.to_int self
  
  use T_core__ops__range__Range as T_core__ops__range__Range
  
  predicate produces'0 (self : Range'0.t_Range usize) (visited : Seq.seq usize) (o : Range'0.t_Range usize) =
    [%#span29] T_core__ops__range__Range.t_Range__end self = T_core__ops__range__Range.t_Range__end o
    /\ deep_model'0 (T_core__ops__range__Range.t_Range__start self)
    <= deep_model'0 (T_core__ops__range__Range.t_Range__start o)
    /\ (Seq.length visited > 0
     -> deep_model'0 (T_core__ops__range__Range.t_Range__start o)
    <= deep_model'0 (T_core__ops__range__Range.t_Range__end o))
    /\ Seq.length visited
    = deep_model'0 (T_core__ops__range__Range.t_Range__start o)
    - deep_model'0 (T_core__ops__range__Range.t_Range__start self)
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> deep_model'0 (Seq.get visited i) = deep_model'0 (T_core__ops__range__Range.t_Range__start self) + i)
  
  function produces_trans'0 (a : Range'0.t_Range usize) (ab : Seq.seq usize) (b : Range'0.t_Range usize) (bc : Seq.seq usize) (c : Range'0.t_Range usize) : ()
    
  
  axiom produces_trans'0_spec : forall a : Range'0.t_Range usize, ab : Seq.seq usize, b : Range'0.t_Range usize, bc : Seq.seq usize, c : Range'0.t_Range usize . ([%#span30] inv'1 a)
   -> ([%#span31] inv'1 b)
   -> ([%#span32] inv'1 c)
   -> ([%#span33] produces'0 a ab b)  -> ([%#span34] produces'0 b bc c)  -> ([%#span35] produces'0 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'0 (self : Range'0.t_Range usize) : ()
  
  axiom produces_refl'0_spec : forall self : Range'0.t_Range usize . ([%#span36] inv'1 self)
   -> ([%#span37] produces'0 self (Seq.empty  : Seq.seq usize) self)
  
  axiom inv'1 [@rewrite] : forall x : Range'0.t_Range usize [inv'1 x] . inv'1 x = true
  
  use seq.Seq
  
  predicate invariant'0 (self : Seq.seq usize) =
    [%#span21] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'6 (Seq.get self i)
  
  predicate inv'0 (_1 : Seq.seq usize)
  
  axiom inv'0 [@rewrite] : forall x : Seq.seq usize [inv'0 x] . inv'0 x = true
  
  use int.Int
  
  use seq.Seq
  
  predicate sorted_range'0 [#"../insertion_sort.rs" 6 0 6 63] (s : Seq.seq int32) (l : int) (u : int) =
    [%#span38] forall i : int, j : int . l <= i /\ i < j /\ j < u  -> Seq.get s i <= Seq.get s j
  
  predicate sorted'0 [#"../insertion_sort.rs" 13 0 13 41] (s : Seq.seq int32) =
    [%#span39] sorted_range'0 s 0 (Seq.length s)
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'3 (self : borrowed (slice int32)) =
    [%#span40] self.final = self.current
  
  predicate resolve'1 (_1 : borrowed (slice int32)) =
    resolve'3 _1
  
  use seq.Permut
  
  function shallow_model'0 (self : borrowed (slice int32)) : Seq.seq int32 =
    [%#span41] shallow_model'2 self.current
  
  let rec swap'0 (self:borrowed (slice int32)) (a:usize) (b:usize) (return'  (ret:()))= {[@expl:precondition] [%#span44] inv'5 self}
    {[@expl:precondition] [%#span43] UIntSize.to_int b < Seq.length (shallow_model'0 self)}
    {[@expl:precondition] [%#span42] UIntSize.to_int a < Seq.length (shallow_model'0 self)}
    any
    [ return' (result:())-> {[%#span45] Permut.exchange (shallow_model'2 self.final) (shallow_model'0 self) (UIntSize.to_int a) (UIntSize.to_int b)}
      (! return' {result}) ]
    
  
  function index_logic'1 [@inline:trivial] (self : slice int32) (ix : usize) : int32 =
    [%#span46] Seq.get (shallow_model'2 self) (UIntSize.to_int ix)
  
  function index_logic'0 [@inline:trivial] (self : slice int32) (ix : int) : int32 =
    [%#span47] Seq.get (shallow_model'2 self) ix
  
  use seq.Seq
  
  predicate resolve'2 (self : borrowed (Range'0.t_Range usize)) =
    [%#span40] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed (Range'0.t_Range usize)) =
    resolve'2 _1
  
  predicate completed'0 (self : borrowed (Range'0.t_Range usize)) =
    [%#span48] resolve'2 self
    /\ deep_model'0 (T_core__ops__range__Range.t_Range__start self.current)
    >= deep_model'0 (T_core__ops__range__Range.t_Range__end self.current)
  
  let rec next'0 (self:borrowed (Range'0.t_Range usize)) (return'  (ret:Option'0.t_Option usize))= {[@expl:precondition] [%#span49] inv'3 self}
    any
    [ return' (result:Option'0.t_Option usize)-> {[%#span51] inv'4 result}
      {[%#span50] match result with
        | Option'0.C_None -> completed'0 self
        | Option'0.C_Some v -> produces'0 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
    
  
  use prelude.prelude.Snapshot
  
  use seq.Permut
  
  predicate permutation_of'0 (self : Seq.seq int32) (o : Seq.seq int32) =
    [%#span52] Permut.permut self o 0 (Seq.length self)
  
  function shallow_model'4 (self : borrowed (slice int32)) : Seq.seq int32 =
    [%#span53] shallow_model'0 self
  
  function shallow_model'1 (self : Snapshot.snap_ty (borrowed (slice int32))) : Seq.seq int32 =
    [%#span54] shallow_model'4 (Snapshot.inner self)
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  predicate into_iter_post'0 (self : Range'0.t_Range usize) (res : Range'0.t_Range usize) =
    [%#span55] self = res
  
  predicate into_iter_pre'0 (self : Range'0.t_Range usize) =
    [%#span56] true
  
  let rec into_iter'0 (self:Range'0.t_Range usize) (return'  (ret:Range'0.t_Range usize))= {[@expl:precondition] [%#span58] inv'1 self}
    {[@expl:precondition] [%#span57] into_iter_pre'0 self}
    any
    [ return' (result:Range'0.t_Range usize)-> {[%#span59] inv'1 result}
      {[%#span57] into_iter_post'0 self result}
      (! return' {result}) ]
    
  
  function shallow_model'3 (self : slice int32) : Seq.seq int32 =
    [%#span53] shallow_model'2 self
  
  let rec len'0 (self:slice int32) (return'  (ret:usize))= {[@expl:precondition] [%#span60] inv'2 self}
    any
    [ return' (result:usize)-> {[%#span61] Seq.length (shallow_model'3 self) = UIntSize.to_int result}
      (! return' {result}) ]
    
  
  use prelude.prelude.Snapshot
  
  meta "compute_max_steps" 1000000
  
  let rec insertion_sort (array:borrowed (slice int32)) (return'  (ret:()))= (! bb0
    [ bb0 = s0 [ s0 =  [ &original <- [%#sinsertion_sort0] Snapshot.new array ] s1 | s1 = bb1 ] 
    | bb1 = s0 [ s0 = len'0 {array.current} (fun (_ret':usize) ->  [ &n <- _ret' ] s1) | s1 = bb2 ] 
    | bb2 = s0
      [ s0 =  [ &_10 <- Range'0.C_Range ([%#sinsertion_sort1] (1 : usize)) n ] s1
      | s1 = into_iter'0 {_10} (fun (_ret':Range'0.t_Range usize) ->  [ &iter <- _ret' ] s2)
      | s2 = bb3 ]
      
    | bb3 = s0 [ s0 =  [ &iter_old <- [%#sinsertion_sort2] Snapshot.new iter ] s1 | s1 = bb4 ] 
    | bb4 = s0 [ s0 =  [ &produced <- [%#sinsertion_sort3] Snapshot.new (Seq.empty  : Seq.seq usize) ] s1 | s1 = bb5 ] 
    | bb5 = s0 [ s0 =  [ &old_6_0 <- Snapshot.new array ] s1 | s1 = bb6 ] 
    | bb6 = bb6
      [ bb6 = {[@expl:loop invariant] (Snapshot.inner old_6_0).final = array.final}
        {[@expl:loop invariant] [%#sinsertion_sort4] permutation_of'0 (shallow_model'1 original) (shallow_model'0 array)}
        {[@expl:loop invariant] [%#sinsertion_sort6] Seq.length (shallow_model'0 array) = UIntSize.to_int n}
        {[@expl:loop invariant] [%#sinsertion_sort5] sorted_range'0 (shallow_model'0 array) 0 (Seq.length (Snapshot.inner produced)
        + 1)}
        {[@expl:loop invariant] [%#sinsertion_sort4] produces'0 (Snapshot.inner iter_old) (Snapshot.inner produced) iter}
        {[@expl:loop invariant] [%#sinsertion_sort4] inv'1 iter}
        {[@expl:loop invariant] [%#sinsertion_sort4] inv'0 (Snapshot.inner produced)}
        (! s0) [ s0 = bb7 ] 
        [ bb7 = s0
          [ s0 = Borrow.borrow_mut <Range'0.t_Range usize> {iter}
              (fun (_ret':borrowed (Range'0.t_Range usize)) ->  [ &_25 <- _ret' ]  [ &iter <- _ret'.final ] s1)
          | s1 = Borrow.borrow_final <Range'0.t_Range usize> {_25.current} {Borrow.get_id _25}
              (fun (_ret':borrowed (Range'0.t_Range usize)) ->
                 [ &_24 <- _ret' ] 
                 [ &_25 <- { _25 with current = _ret'.final ; } ] 
                s2)
          | s2 = next'0 {_24} (fun (_ret':Option'0.t_Option usize) ->  [ &_23 <- _ret' ] s3)
          | s3 = bb8 ]
          
        | bb8 = s0
          [ s0 = -{resolve'0 _25}- s1
          | s1 = any
            [ br0 -> {_23 = Option'0.C_None } (! bb11) | br1 (a:usize)-> {_23 = Option'0.C_Some a} (! bb10) ]
             ]
          
        | bb10 = bb12
        | bb12 = s0
          [ s0 = Option'0.v_Some <usize> {_23} (fun (r0'0:usize) ->  [ &__creusot_proc_iter_elem <- r0'0 ] s1)
          | s1 = 
            [ &_28 <- [%#sinsertion_sort7] Snapshot.new (Seq.(++) (Snapshot.inner produced) (Seq.singleton __creusot_proc_iter_elem)) ]
            
            s2
          | s2 = bb13 ]
          
        | bb13 = s0
          [ s0 =  [ &produced <- _28 ] s1
          | s1 =  [ &i <- __creusot_proc_iter_elem ] s2
          | s2 =  [ &j <- i ] s3
          | s3 =  [ &old_14_0 <- Snapshot.new array ] s4
          | s4 = bb14 ]
          
        | bb14 = bb14
          [ bb14 = {[@expl:loop invariant] (Snapshot.inner old_14_0).final = array.final}
            {[@expl:loop invariant] [%#sinsertion_sort10] forall a : int . UIntSize.to_int j + 1 <= a
            /\ a <= UIntSize.to_int i  -> index_logic'1 array.current j < index_logic'0 array.current a}
            {[@expl:loop invariant] [%#sinsertion_sort10] forall a : int, b : int . 0 <= a
            /\ a <= b /\ b <= UIntSize.to_int i
             -> a <> UIntSize.to_int j
             -> b <> UIntSize.to_int j  -> index_logic'0 array.current a <= index_logic'0 array.current b}
            {[@expl:loop invariant] [%#sinsertion_sort10] permutation_of'0 (shallow_model'1 original) (shallow_model'0 array)}
            {[@expl:loop invariant] [%#sinsertion_sort9] Seq.length (shallow_model'0 array) = UIntSize.to_int n}
            {[@expl:loop invariant] [%#sinsertion_sort8] j <= i}
            (! s0) [ s0 = bb15 ] 
            [ bb15 = s0
              [ s0 = UIntSize.gt {j} {[%#sinsertion_sort11] (0 : usize)} (fun (_ret':bool) ->  [ &_37 <- _ret' ] s1)
              | s1 = any [ br0 -> {_37 = false} (! bb22) | br1 -> {_37} (! bb16) ]  ]
              
            | bb16 = s0
              [ s0 = UIntSize.sub {j} {[%#sinsertion_sort12] (1 : usize)} (fun (_ret':usize) ->  [ &_42 <- _ret' ] s1)
              | s1 =  [ &_44 <- Slice.length array.current ] s2
              | s2 = UIntSize.lt {_42} {_44} (fun (_ret':bool) ->  [ &_45 <- _ret' ] s3)
              | s3 = {[@expl:index in bounds] [%#sinsertion_sort13] _45} s4
              | s4 = bb17 ]
              
            | bb17 = s0
              [ s0 =  [ &_47 <- j ] s1
              | s1 =  [ &_48 <- Slice.length array.current ] s2
              | s2 = UIntSize.lt {_47} {_48} (fun (_ret':bool) ->  [ &_49 <- _ret' ] s3)
              | s3 = {[@expl:index in bounds] [%#sinsertion_sort14] _49} s4
              | s4 = bb18 ]
              
            | bb18 = s0
              [ s0 = Slice.get <int32> {array.current} {_42}
                  (fun (r'0:int32) ->
                    Slice.get <int32> {array.current} {_47}
                      (fun (r'1:int32) -> Int32.gt {r'0} {r'1} (fun (_ret':bool) ->  [ &_40 <- _ret' ] s1)))
              | s1 = any [ br0 -> {_40 = false} (! bb21) | br1 -> {_40} (! bb19) ]  ]
              
            | bb19 = s0
              [ s0 = Borrow.borrow_mut <slice int32> {array.current}
                  (fun (_ret':borrowed (slice int32)) ->
                     [ &_51 <- _ret' ] 
                     [ &array <- { array with current = _ret'.final ; } ] 
                    s1)
              | s1 = UIntSize.sub {j} {[%#sinsertion_sort15] (1 : usize)} (fun (_ret':usize) ->  [ &_52 <- _ret' ] s2)
              | s2 = swap'0 {_51} {_52} {j} (fun (_ret':()) ->  [ &_50 <- _ret' ] s3)
              | s3 = bb20 ]
              
            | bb20 = s0
              [ s0 = UIntSize.sub {j} {[%#sinsertion_sort16] (1 : usize)} (fun (_ret':usize) ->  [ &j <- _ret' ] s1)
              | s1 = bb14 ]
               ]
             ]
          
        | bb21 = bb23
        | bb22 = bb23
        | bb23 = bb6 ]
         ]
      
    | bb11 = s0
      [ s0 = -{resolve'1 array}- s1
      | s1 = {[@expl:assertion] [%#sinsertion_sort17] sorted_range'0 (shallow_model'0 array) 0 (Seq.length (shallow_model'0 array))}
        s2
      | s2 = return' {_0} ]
       ]
    )
    [ & _0 : () = any_l ()
    | & array : borrowed (slice int32) = array
    | & original : Snapshot.snap_ty (borrowed (slice int32)) = any_l ()
    | & n : usize = any_l ()
    | & iter : Range'0.t_Range usize = any_l ()
    | & _10 : Range'0.t_Range usize = any_l ()
    | & iter_old : Snapshot.snap_ty (Range'0.t_Range usize) = any_l ()
    | & produced : Snapshot.snap_ty (Seq.seq usize) = any_l ()
    | & _23 : Option'0.t_Option usize = any_l ()
    | & _24 : borrowed (Range'0.t_Range usize) = any_l ()
    | & _25 : borrowed (Range'0.t_Range usize) = any_l ()
    | & __creusot_proc_iter_elem : usize = any_l ()
    | & _28 : Snapshot.snap_ty (Seq.seq usize) = any_l ()
    | & i : usize = any_l ()
    | & j : usize = any_l ()
    | & _37 : bool = any_l ()
    | & _40 : bool = any_l ()
    | & _42 : usize = any_l ()
    | & _44 : usize = any_l ()
    | & _45 : bool = any_l ()
    | & _47 : usize = any_l ()
    | & _48 : usize = any_l ()
    | & _49 : bool = any_l ()
    | & _50 : () = any_l ()
    | & _51 : borrowed (slice int32) = any_l ()
    | & _52 : usize = any_l ()
    | & old_14_0 : Snapshot.snap_ty (borrowed (slice int32)) = any_l ()
    | & old_6_0 : Snapshot.snap_ty (borrowed (slice int32)) = any_l () ]
    
    [ return' (result:())-> {[@expl:postcondition] [%#sinsertion_sort19] sorted'0 (shallow_model'2 array.final)}
      {[@expl:postcondition] [%#sinsertion_sort18] permutation_of'0 (shallow_model'0 array) (shallow_model'2 array.final)}
      (! return' {result}) ]
    
end
