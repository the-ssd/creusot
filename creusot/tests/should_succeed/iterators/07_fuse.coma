
module T_core__option__Option
  type t_Option 't =
    | C_None
    | C_Some 't
  
  function any_l (_ : 'b) : 'a
  
  let rec v_None < 't > (input:t_Option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} (! {false} any) ]
    
  
  let rec v_Some < 't > (input:t_Option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : 't [C_Some field_0 : t_Option 't] . C_Some field_0 <> input} (! {false} any) ]
    
end
module T_07_fuse__Fuse [#"../07_fuse.rs" 7 0 7 28]
  use T_core__option__Option as Option'0
  
  type t_Fuse 'i =
    | C_Fuse (Option'0.t_Option 'i)
  
  function any_l (_ : 'b) : 'a
  
  let rec t_Fuse < 'i > (input:t_Fuse 'i) (ret  (iter:Option'0.t_Option 'i))= any
    [ good (iter:Option'0.t_Option 'i)-> {C_Fuse iter = input} (! ret {iter}) ]
    
  
  function t_Fuse__iter (self : t_Fuse 'i) : Option'0.t_Option 'i =
    match self with
      | C_Fuse a -> a
      end
end
module M_07_fuse__qyi2452592938496686347__next [#"../07_fuse.rs" 39 4 39 44] (* <Fuse<I> as common::Iterator> *)
  type i
  
  let%span s07_fuse0 = "../07_fuse.rs" 39 17 39 21
  let%span s07_fuse1 = "../07_fuse.rs" 35 14 38 5
  let%span s07_fuse2 = "../07_fuse.rs" 39 26 39 44
  let%span span3 = "../../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span span4 = "../common.rs" 19 15 19 21
  let%span span5 = "../common.rs" 20 15 20 21
  let%span span6 = "../common.rs" 21 15 21 21
  let%span span7 = "../common.rs" 22 15 22 32
  let%span span8 = "../common.rs" 23 15 23 32
  let%span span9 = "../common.rs" 24 14 24 42
  let%span span10 = "../common.rs" 14 15 14 24
  let%span span11 = "../common.rs" 15 14 15 45
  let%span span12 = "../07_fuse.rs" 26 8 32 9
  let%span span13 = "../07_fuse.rs" 18 12 19 32
  let%span span14 = "../../../../../creusot-contracts/src/resolve.rs" 69 8 72 9
  let%span span15 = "../../../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  let%span span16 = "../common.rs" 31 17 31 21
  let%span span17 = "../common.rs" 27 14 30 5
  let%span span18 = "../common.rs" 31 26 31 44
  
  use T_core__option__Option as Option'0
  
  predicate inv'0 (_1 : Option'0.t_Option i)
  
  use T_07_fuse__Fuse as Fuse'0
  
  predicate inv'7 (_1 : Fuse'0.t_Fuse i)
  
  axiom inv'7 [@rewrite] : forall x : Fuse'0.t_Fuse i [inv'7 x] . inv'7 x
  = match x with
    | Fuse'0.C_Fuse iter -> inv'0 iter
    end
  
  type t_Item'0
  
  predicate invariant'4 (self : t_Item'0)
  
  predicate inv'6 (_1 : t_Item'0)
  
  axiom inv'6 : forall x : t_Item'0 [inv'6 x] . inv'6 x  -> invariant'4 x
  
  predicate inv'5 (_1 : Option'0.t_Option t_Item'0)
  
  axiom inv'5 [@rewrite] : forall x : Option'0.t_Option t_Item'0 [inv'5 x] . inv'5 x
  = match x with
    | Option'0.C_None -> true
    | Option'0.C_Some a_0 -> inv'6 a_0
    end
  
  use prelude.prelude.Borrow
  
  predicate invariant'3 (self : borrowed (Fuse'0.t_Fuse i)) =
    [%#span3] inv'7 self.current /\ inv'7 self.final
  
  predicate inv'4 (_1 : borrowed (Fuse'0.t_Fuse i))
  
  axiom inv'4 [@rewrite] : forall x : borrowed (Fuse'0.t_Fuse i) [inv'4 x] . inv'4 x = invariant'3 x
  
  predicate invariant'2 (self : borrowed (Option'0.t_Option i)) =
    [%#span3] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'3 (_1 : borrowed (Option'0.t_Option i))
  
  axiom inv'3 [@rewrite] : forall x : borrowed (Option'0.t_Option i) [inv'3 x] . inv'3 x = invariant'2 x
  
  predicate inv'1 (_1 : i)
  
  predicate invariant'1 (self : borrowed i) =
    [%#span3] inv'1 self.current /\ inv'1 self.final
  
  predicate inv'2 (_1 : borrowed i)
  
  axiom inv'2 [@rewrite] : forall x : borrowed i [inv'2 x] . inv'2 x = invariant'1 x
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'1 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq.seq t_Item'0) (o : i)
  
  function produces_trans'0 [#"../common.rs" 25 4 25 91] (a : i) (ab : Seq.seq t_Item'0) (b : i) (bc : Seq.seq t_Item'0) (c : i) : ()
    
  
  axiom produces_trans'0_spec : forall a : i, ab : Seq.seq t_Item'0, b : i, bc : Seq.seq t_Item'0, c : i . ([%#span4] inv'1 a)
   -> ([%#span5] inv'1 b)
   -> ([%#span6] inv'1 c)
   -> ([%#span7] produces'1 a ab b)  -> ([%#span8] produces'1 b bc c)  -> ([%#span9] produces'1 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'0 [#"../common.rs" 16 4 16 27] (self : i) : ()
  
  axiom produces_refl'0_spec : forall self : i . ([%#span10] inv'1 self)
   -> ([%#span11] produces'1 self (Seq.empty  : Seq.seq t_Item'0) self)
  
  predicate invariant'0 (self : i)
  
  axiom inv'1 : forall x : i [inv'1 x] . inv'1 x  -> invariant'0 x
  
  axiom inv'0 [@rewrite] : forall x : Option'0.t_Option i [inv'0 x] . inv'0 x
  = match x with
    | Option'0.C_None -> true
    | Option'0.C_Some a_0 -> inv'1 a_0
    end
  
  use T_07_fuse__Fuse as T_07_fuse__Fuse
  
  predicate produces'0 [#"../07_fuse.rs" 25 4 25 65] (self : Fuse'0.t_Fuse i) (prod : Seq.seq t_Item'0) (other : Fuse'0.t_Fuse i)
    
   =
    [%#span12] match T_07_fuse__Fuse.t_Fuse__iter self with
      | Option'0.C_None -> prod = (Seq.empty  : Seq.seq t_Item'0)
      /\ T_07_fuse__Fuse.t_Fuse__iter other = T_07_fuse__Fuse.t_Fuse__iter self
      | Option'0.C_Some i -> match T_07_fuse__Fuse.t_Fuse__iter other with
        | Option'0.C_Some i2 -> produces'1 i prod i2
        | Option'0.C_None -> false
        end
      end
  
  use seq.Seq
  
  predicate completed'1 [#"../common.rs" 11 4 11 36] (self : borrowed i)
  
  predicate completed'0 [#"../07_fuse.rs" 16 4 16 35] (self : borrowed (Fuse'0.t_Fuse i)) =
    [%#span13] (T_07_fuse__Fuse.t_Fuse__iter self.current = Option'0.C_None
    \/ (exists it : borrowed i . inv'2 it
    /\ completed'1 it /\ T_07_fuse__Fuse.t_Fuse__iter self.current = Option'0.C_Some (it.current)))
    /\ T_07_fuse__Fuse.t_Fuse__iter self.final = Option'0.C_None
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'11 (_1 : i)
  
  predicate resolve'9 (self : Option'0.t_Option i) =
    [%#span14] match self with
      | Option'0.C_Some x -> resolve'11 x
      | Option'0.C_None -> true
      end
  
  predicate resolve'4 (_1 : Option'0.t_Option i) =
    resolve'9 _1
  
  predicate resolve'10 (_1 : t_Item'0)
  
  predicate resolve'8 (self : Option'0.t_Option t_Item'0) =
    [%#span14] match self with
      | Option'0.C_Some x -> resolve'10 x
      | Option'0.C_None -> true
      end
  
  predicate resolve'3 (_1 : Option'0.t_Option t_Item'0) =
    resolve'8 _1
  
  predicate resolve'7 (self : borrowed (Fuse'0.t_Fuse i)) =
    [%#span15] self.final = self.current
  
  predicate resolve'2 (_1 : borrowed (Fuse'0.t_Fuse i)) =
    resolve'7 _1
  
  predicate resolve'6 (self : borrowed (Option'0.t_Option i)) =
    [%#span15] self.final = self.current
  
  predicate resolve'1 (_1 : borrowed (Option'0.t_Option i)) =
    resolve'6 _1
  
  predicate resolve'5 (self : borrowed i) =
    [%#span15] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed i) =
    resolve'5 _1
  
  let rec next'0 (self:borrowed i) (return'  (ret:Option'0.t_Option t_Item'0))= {[@expl:precondition] [%#span16] inv'2 self}
    any
    [ return' (result:Option'0.t_Option t_Item'0)-> {[%#span18] inv'5 result}
      {[%#span17] match result with
        | Option'0.C_None -> completed'1 self
        | Option'0.C_Some v -> produces'1 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
    
  
  meta "compute_max_steps" 1000000
  
  let rec next (self:borrowed (Fuse'0.t_Fuse i)) (return'  (ret:Option'0.t_Option t_Item'0))= {[%#s07_fuse0] inv'4 self}
    (! bb0
    [ bb0 = s0
      [ s0 = Fuse'0.t_Fuse <i> {self.current}
          (fun (riter'0:Option'0.t_Option i) ->
            {inv'0 riter'0}
            Borrow.borrow_mut <Option'0.t_Option i> {riter'0}
              (fun (_ret':borrowed (Option'0.t_Option i)) ->
                 [ &_3 <- _ret' ] 
                -{inv'0 _ret'.final}-
                 [ &self <- { self with current = Fuse'0.C_Fuse _ret'.final ; } ] 
                s1))
      | s1 = any
        [ br0 -> {_3.current = Option'0.C_None } (! bb2) | br1 (a:i)-> {_3.current = Option'0.C_Some a} (! bb3) ]
         ]
      
    | bb3 = s0
      [ s0 = Option'0.v_Some <i> {_3.current}
          (fun (r0'0:i) ->
            {inv'1 r0'0}
            Borrow.borrow_final <i> {r0'0} {Borrow.inherit_id (Borrow.get_id _3) 1}
              (fun (_ret':borrowed i) ->
                 [ &iter <- _ret' ] 
                -{inv'1 _ret'.final}-
                 [ &_3 <- { _3 with current = Option'0.C_Some _ret'.final ; } ] 
                s1))
      | s1 = {inv'1 iter.current}
        Borrow.borrow_final <i> {iter.current} {Borrow.get_id iter}
          (fun (_ret':borrowed i) ->
             [ &_7 <- _ret' ] 
            -{inv'1 _ret'.final}-
             [ &iter <- { iter with current = _ret'.final ; } ] 
            s2)
      | s2 = next'0 {_7} (fun (_ret':Option'0.t_Option t_Item'0) ->  [ &_6 <- _ret' ] s3)
      | s3 = bb5 ]
      
    | bb5 = s0
      [ s0 = {[@expl:type invariant] inv'2 iter} s1
      | s1 = -{resolve'0 iter}- s2
      | s2 = {[@expl:type invariant] inv'3 _3} s3
      | s3 = -{resolve'1 _3}- s4
      | s4 = any [ br0 -> {_6 = Option'0.C_None } (! bb7) | br1 (a:t_Item'0)-> {_6 = Option'0.C_Some a} (! bb6) ]  ]
      
    | bb6 = s0
      [ s0 = {[@expl:type invariant] inv'4 self} s1
      | s1 = -{resolve'2 self}- s2
      | s2 =  [ &x <- _6 ] s3
      | s3 =  [ &_0 <- x ] s4
      | s4 = bb12 ]
      
    | bb12 = bb13
    | bb7 = s0 [ s0 = {[@expl:type invariant] inv'5 _6} s1 | s1 = -{resolve'3 _6}- s2 | s2 = bb8 ] 
    | bb8 = s0 [ s0 =  [ &_9 <- Option'0.C_None ] s1 | s1 = bb9 ] 
    | bb9 = s0
      [ s0 = {[@expl:type invariant] match self with
          | {current = Fuse'0.C_Fuse x'0} -> inv'0 x'0
          | _ -> true
          end}
        s1
      | s1 = -{match self with
          | {current = Fuse'0.C_Fuse x'1} -> resolve'4 x'1
          | _ -> true
          end}-
        s2
      | s2 = Fuse'0.t_Fuse <i> {self.current}
          (fun (riter'0:Option'0.t_Option i) ->  [ &self <- { self with current = Fuse'0.C_Fuse _9 ; } ] s3)
      | s3 = {[@expl:type invariant] inv'4 self} s4
      | s4 = -{resolve'2 self}- s5
      | s5 = bb11 ]
      
    | bb11 = s0 [ s0 =  [ &_0 <- Option'0.C_None ] s1 | s1 = bb13 ] 
    | bb13 = bb14
    | bb14 = bb15
    | bb2 = s0 [ s0 = {[@expl:type invariant] inv'3 _3} s1 | s1 = -{resolve'1 _3}- s2 | s2 = bb4 ] 
    | bb4 = s0
      [ s0 = {[@expl:type invariant] inv'4 self} s1
      | s1 = -{resolve'2 self}- s2
      | s2 =  [ &_0 <- Option'0.C_None ] s3
      | s3 = bb15 ]
      
    | bb15 = return' {_0} ]
    )
    [ & _0 : Option'0.t_Option t_Item'0 = any_l ()
    | & self : borrowed (Fuse'0.t_Fuse i) = self
    | & _3 : borrowed (Option'0.t_Option i) = any_l ()
    | & iter : borrowed i = any_l ()
    | & _6 : Option'0.t_Option t_Item'0 = any_l ()
    | & _7 : borrowed i = any_l ()
    | & _9 : Option'0.t_Option i = any_l ()
    | & x : Option'0.t_Option t_Item'0 = any_l () ]
    
    [ return' (result:Option'0.t_Option t_Item'0)-> {[@expl:postcondition] [%#s07_fuse2] inv'5 result}
      {[@expl:postcondition] [%#s07_fuse1] match result with
        | Option'0.C_None -> completed'0 self
        | Option'0.C_Some v -> produces'0 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
    
end
module M_07_fuse__qyi2452592938496686347__produces_refl [#"../07_fuse.rs" 56 4 56 26] (* <Fuse<I> as common::Iterator> *)
  type i
  
  let%span s07_fuse0 = "../07_fuse.rs" 54 15 54 24
  let%span s07_fuse1 = "../07_fuse.rs" 55 14 55 45
  let%span span2 = "../common.rs" 19 15 19 21
  let%span span3 = "../common.rs" 20 15 20 21
  let%span span4 = "../common.rs" 21 15 21 21
  let%span span5 = "../common.rs" 22 15 22 32
  let%span span6 = "../common.rs" 23 15 23 32
  let%span span7 = "../common.rs" 24 14 24 42
  let%span span8 = "../common.rs" 14 15 14 24
  let%span span9 = "../common.rs" 15 14 15 45
  let%span span10 = "../07_fuse.rs" 26 8 32 9
  
  predicate invariant'0 (self : i)
  
  predicate inv'2 (_1 : i)
  
  axiom inv'2 : forall x : i [inv'2 x] . inv'2 x  -> invariant'0 x
  
  use T_core__option__Option as Option'0
  
  predicate inv'1 (_1 : Option'0.t_Option i)
  
  axiom inv'1 [@rewrite] : forall x : Option'0.t_Option i [inv'1 x] . inv'1 x
  = match x with
    | Option'0.C_None -> true
    | Option'0.C_Some a_0 -> inv'2 a_0
    end
  
  type t_Item'0
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'1 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq.seq t_Item'0) (o : i)
  
  function produces_trans'0 [#"../common.rs" 25 4 25 91] (a : i) (ab : Seq.seq t_Item'0) (b : i) (bc : Seq.seq t_Item'0) (c : i) : ()
    
  
  axiom produces_trans'0_spec : forall a : i, ab : Seq.seq t_Item'0, b : i, bc : Seq.seq t_Item'0, c : i . ([%#span2] inv'2 a)
   -> ([%#span3] inv'2 b)
   -> ([%#span4] inv'2 c)
   -> ([%#span5] produces'1 a ab b)  -> ([%#span6] produces'1 b bc c)  -> ([%#span7] produces'1 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'0 [#"../common.rs" 16 4 16 27] (self : i) : ()
  
  axiom produces_refl'0_spec : forall self : i . ([%#span8] inv'2 self)
   -> ([%#span9] produces'1 self (Seq.empty  : Seq.seq t_Item'0) self)
  
  use T_07_fuse__Fuse as Fuse'0
  
  predicate inv'0 (_1 : Fuse'0.t_Fuse i)
  
  axiom inv'0 [@rewrite] : forall x : Fuse'0.t_Fuse i [inv'0 x] . inv'0 x
  = match x with
    | Fuse'0.C_Fuse iter -> inv'1 iter
    end
  
  use T_07_fuse__Fuse as T_07_fuse__Fuse
  
  predicate produces'0 [#"../07_fuse.rs" 25 4 25 65] (self : Fuse'0.t_Fuse i) (prod : Seq.seq t_Item'0) (other : Fuse'0.t_Fuse i)
    
   =
    [%#span10] match T_07_fuse__Fuse.t_Fuse__iter self with
      | Option'0.C_None -> prod = (Seq.empty  : Seq.seq t_Item'0)
      /\ T_07_fuse__Fuse.t_Fuse__iter other = T_07_fuse__Fuse.t_Fuse__iter self
      | Option'0.C_Some i -> match T_07_fuse__Fuse.t_Fuse__iter other with
        | Option'0.C_Some i2 -> produces'1 i prod i2
        | Option'0.C_None -> false
        end
      end
  
  constant self  : Fuse'0.t_Fuse i
  
  function produces_refl [#"../07_fuse.rs" 56 4 56 26] (self : Fuse'0.t_Fuse i) : ()
  
  goal vc_produces_refl : ([%#s07_fuse0] inv'0 self)
   -> ([%#s07_fuse1] produces'0 self (Seq.empty  : Seq.seq t_Item'0) self)
end
module M_07_fuse__qyi2452592938496686347__produces_trans [#"../07_fuse.rs" 66 4 66 90] (* <Fuse<I> as common::Iterator> *)
  type i
  
  let%span s07_fuse0 = "../07_fuse.rs" 60 15 60 21
  let%span s07_fuse1 = "../07_fuse.rs" 61 15 61 21
  let%span s07_fuse2 = "../07_fuse.rs" 62 15 62 21
  let%span s07_fuse3 = "../07_fuse.rs" 63 15 63 32
  let%span s07_fuse4 = "../07_fuse.rs" 64 15 64 32
  let%span s07_fuse5 = "../07_fuse.rs" 65 14 65 42
  let%span span6 = "../common.rs" 19 15 19 21
  let%span span7 = "../common.rs" 20 15 20 21
  let%span span8 = "../common.rs" 21 15 21 21
  let%span span9 = "../common.rs" 22 15 22 32
  let%span span10 = "../common.rs" 23 15 23 32
  let%span span11 = "../common.rs" 24 14 24 42
  let%span span12 = "../common.rs" 14 15 14 24
  let%span span13 = "../common.rs" 15 14 15 45
  let%span span14 = "../07_fuse.rs" 26 8 32 9
  
  predicate invariant'0 (self : i)
  
  predicate inv'2 (_1 : i)
  
  axiom inv'2 : forall x : i [inv'2 x] . inv'2 x  -> invariant'0 x
  
  use T_core__option__Option as Option'0
  
  predicate inv'1 (_1 : Option'0.t_Option i)
  
  axiom inv'1 [@rewrite] : forall x : Option'0.t_Option i [inv'1 x] . inv'1 x
  = match x with
    | Option'0.C_None -> true
    | Option'0.C_Some a_0 -> inv'2 a_0
    end
  
  type t_Item'0
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'1 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq.seq t_Item'0) (o : i)
  
  function produces_trans'0 [#"../common.rs" 25 4 25 91] (a : i) (ab : Seq.seq t_Item'0) (b : i) (bc : Seq.seq t_Item'0) (c : i) : ()
    
  
  axiom produces_trans'0_spec : forall a : i, ab : Seq.seq t_Item'0, b : i, bc : Seq.seq t_Item'0, c : i . ([%#span6] inv'2 a)
   -> ([%#span7] inv'2 b)
   -> ([%#span8] inv'2 c)
   -> ([%#span9] produces'1 a ab b)  -> ([%#span10] produces'1 b bc c)  -> ([%#span11] produces'1 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'0 [#"../common.rs" 16 4 16 27] (self : i) : ()
  
  axiom produces_refl'0_spec : forall self : i . ([%#span12] inv'2 self)
   -> ([%#span13] produces'1 self (Seq.empty  : Seq.seq t_Item'0) self)
  
  use T_07_fuse__Fuse as Fuse'0
  
  predicate inv'0 (_1 : Fuse'0.t_Fuse i)
  
  axiom inv'0 [@rewrite] : forall x : Fuse'0.t_Fuse i [inv'0 x] . inv'0 x
  = match x with
    | Fuse'0.C_Fuse iter -> inv'1 iter
    end
  
  use T_07_fuse__Fuse as T_07_fuse__Fuse
  
  predicate produces'0 [#"../07_fuse.rs" 25 4 25 65] (self : Fuse'0.t_Fuse i) (prod : Seq.seq t_Item'0) (other : Fuse'0.t_Fuse i)
    
   =
    [%#span14] match T_07_fuse__Fuse.t_Fuse__iter self with
      | Option'0.C_None -> prod = (Seq.empty  : Seq.seq t_Item'0)
      /\ T_07_fuse__Fuse.t_Fuse__iter other = T_07_fuse__Fuse.t_Fuse__iter self
      | Option'0.C_Some i -> match T_07_fuse__Fuse.t_Fuse__iter other with
        | Option'0.C_Some i2 -> produces'1 i prod i2
        | Option'0.C_None -> false
        end
      end
  
  constant a  : Fuse'0.t_Fuse i
  
  constant ab  : Seq.seq t_Item'0
  
  constant b  : Fuse'0.t_Fuse i
  
  constant bc  : Seq.seq t_Item'0
  
  constant c  : Fuse'0.t_Fuse i
  
  function produces_trans [#"../07_fuse.rs" 66 4 66 90] (a : Fuse'0.t_Fuse i) (ab : Seq.seq t_Item'0) (b : Fuse'0.t_Fuse i) (bc : Seq.seq t_Item'0) (c : Fuse'0.t_Fuse i) : ()
    
  
  goal vc_produces_trans : ([%#s07_fuse4] produces'0 b bc c)
   -> ([%#s07_fuse3] produces'0 a ab b)
   -> ([%#s07_fuse2] inv'0 c)
   -> ([%#s07_fuse1] inv'0 b)  -> ([%#s07_fuse0] inv'0 a)  -> ([%#s07_fuse5] produces'0 a (Seq.(++) ab bc) c)
end
module T_alloc__alloc__Global
  type t_Global  =
    | C_Global
  
  function any_l (_ : 'b) : 'a
  
  let rec t_Global (input:t_Global) (ret  )= any [ good -> {C_Global  = input} (! ret) ] 
end
module M_07_fuse__qyi3347558734837599430__is_fused [#"../07_fuse.rs" 91 4 91 62] (* <Fuse<I> as FusedIterator> *)
  type i
  
  let%span s07_fuse0 = "../07_fuse.rs" 85 15 85 24
  let%span s07_fuse1 = "../07_fuse.rs" 86 15 86 24
  let%span s07_fuse2 = "../07_fuse.rs" 87 15 87 25
  let%span s07_fuse3 = "../07_fuse.rs" 88 15 88 31
  let%span s07_fuse4 = "../07_fuse.rs" 89 15 89 44
  let%span s07_fuse5 = "../07_fuse.rs" 90 14 90 50
  let%span span6 = "../../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  let%span span7 = "../../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span span8 = "../common.rs" 19 15 19 21
  let%span span9 = "../common.rs" 20 15 20 21
  let%span span10 = "../common.rs" 21 15 21 21
  let%span span11 = "../common.rs" 22 15 22 32
  let%span span12 = "../common.rs" 23 15 23 32
  let%span span13 = "../common.rs" 24 14 24 42
  let%span span14 = "../common.rs" 14 15 14 24
  let%span span15 = "../common.rs" 15 14 15 45
  let%span span16 = "../07_fuse.rs" 26 8 32 9
  let%span span17 = "../07_fuse.rs" 60 15 60 21
  let%span span18 = "../07_fuse.rs" 61 15 61 21
  let%span span19 = "../07_fuse.rs" 62 15 62 21
  let%span span20 = "../07_fuse.rs" 63 15 63 32
  let%span span21 = "../07_fuse.rs" 64 15 64 32
  let%span span22 = "../07_fuse.rs" 65 14 65 42
  let%span span23 = "../07_fuse.rs" 58 4 58 10
  let%span span24 = "../07_fuse.rs" 54 15 54 24
  let%span span25 = "../07_fuse.rs" 55 14 55 45
  let%span span26 = "../07_fuse.rs" 52 4 52 10
  let%span span27 = "../../../../../creusot-contracts/src/logic/seq.rs" 198 8 198 97
  let%span span28 = "../07_fuse.rs" 18 12 19 32
  
  type t_Item'0
  
  predicate invariant'5 (self : t_Item'0)
  
  predicate inv'7 (_1 : t_Item'0)
  
  axiom inv'7 : forall x : t_Item'0 [inv'7 x] . inv'7 x  -> invariant'5 x
  
  use T_alloc__alloc__Global as Global'0
  
  predicate invariant'4 (self : t_Item'0) =
    [%#span6] inv'7 self
  
  predicate inv'6 (_1 : t_Item'0)
  
  axiom inv'6 [@rewrite] : forall x : t_Item'0 [inv'6 x] . inv'6 x = invariant'4 x
  
  predicate invariant'3 (self : i)
  
  predicate inv'5 (_1 : i)
  
  axiom inv'5 : forall x : i [inv'5 x] . inv'5 x  -> invariant'3 x
  
  use T_core__option__Option as Option'0
  
  predicate inv'4 (_1 : Option'0.t_Option i)
  
  axiom inv'4 [@rewrite] : forall x : Option'0.t_Option i [inv'4 x] . inv'4 x
  = match x with
    | Option'0.C_None -> true
    | Option'0.C_Some a_0 -> inv'5 a_0
    end
  
  use prelude.prelude.Borrow
  
  predicate invariant'2 (self : borrowed i) =
    [%#span7] inv'5 self.current /\ inv'5 self.final
  
  predicate inv'3 (_1 : borrowed i)
  
  axiom inv'3 [@rewrite] : forall x : borrowed i [inv'3 x] . inv'3 x = invariant'2 x
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'1 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq.seq t_Item'0) (o : i)
  
  function produces_trans'1 [#"../common.rs" 25 4 25 91] (a : i) (ab : Seq.seq t_Item'0) (b : i) (bc : Seq.seq t_Item'0) (c : i) : ()
    
  
  axiom produces_trans'1_spec : forall a : i, ab : Seq.seq t_Item'0, b : i, bc : Seq.seq t_Item'0, c : i . ([%#span8] inv'5 a)
   -> ([%#span9] inv'5 b)
   -> ([%#span10] inv'5 c)
   -> ([%#span11] produces'1 a ab b)  -> ([%#span12] produces'1 b bc c)  -> ([%#span13] produces'1 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'1 [#"../common.rs" 16 4 16 27] (self : i) : ()
  
  axiom produces_refl'1_spec : forall self : i . ([%#span14] inv'5 self)
   -> ([%#span15] produces'1 self (Seq.empty  : Seq.seq t_Item'0) self)
  
  use T_07_fuse__Fuse as Fuse'0
  
  use T_07_fuse__Fuse as T_07_fuse__Fuse
  
  predicate produces'0 [#"../07_fuse.rs" 25 4 25 65] (self : Fuse'0.t_Fuse i) (prod : Seq.seq t_Item'0) (other : Fuse'0.t_Fuse i)
    
   =
    [%#span16] match T_07_fuse__Fuse.t_Fuse__iter self with
      | Option'0.C_None -> prod = (Seq.empty  : Seq.seq t_Item'0)
      /\ T_07_fuse__Fuse.t_Fuse__iter other = T_07_fuse__Fuse.t_Fuse__iter self
      | Option'0.C_Some i -> match T_07_fuse__Fuse.t_Fuse__iter other with
        | Option'0.C_Some i2 -> produces'1 i prod i2
        | Option'0.C_None -> false
        end
      end
  
  predicate inv'1 (_1 : Fuse'0.t_Fuse i)
  
  function produces_trans'0 [#"../07_fuse.rs" 66 4 66 90] (a : Fuse'0.t_Fuse i) (ab : Seq.seq t_Item'0) (b : Fuse'0.t_Fuse i) (bc : Seq.seq t_Item'0) (c : Fuse'0.t_Fuse i) : ()
    
   =
    [%#span23] ()
  
  axiom produces_trans'0_spec : forall a : Fuse'0.t_Fuse i, ab : Seq.seq t_Item'0, b : Fuse'0.t_Fuse i, bc : Seq.seq t_Item'0, c : Fuse'0.t_Fuse i . ([%#span17] inv'1 a)
   -> ([%#span18] inv'1 b)
   -> ([%#span19] inv'1 c)
   -> ([%#span20] produces'0 a ab b)  -> ([%#span21] produces'0 b bc c)  -> ([%#span22] produces'0 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 [#"../07_fuse.rs" 56 4 56 26] (self : Fuse'0.t_Fuse i) : () =
    [%#span26] ()
  
  axiom produces_refl'0_spec : forall self : Fuse'0.t_Fuse i . ([%#span24] inv'1 self)
   -> ([%#span25] produces'0 self (Seq.empty  : Seq.seq t_Item'0) self)
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  predicate invariant'1 (self : Seq.seq t_Item'0) =
    [%#span27] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'6 (Seq.get self i)
  
  predicate inv'2 (_1 : Seq.seq t_Item'0)
  
  axiom inv'2 [@rewrite] : forall x : Seq.seq t_Item'0 [inv'2 x] . inv'2 x = invariant'1 x
  
  axiom inv'1 [@rewrite] : forall x : Fuse'0.t_Fuse i [inv'1 x] . inv'1 x
  = match x with
    | Fuse'0.C_Fuse iter -> inv'4 iter
    end
  
  predicate invariant'0 (self : borrowed (Fuse'0.t_Fuse i)) =
    [%#span7] inv'1 self.current /\ inv'1 self.final
  
  predicate inv'0 (_1 : borrowed (Fuse'0.t_Fuse i))
  
  axiom inv'0 [@rewrite] : forall x : borrowed (Fuse'0.t_Fuse i) [inv'0 x] . inv'0 x = invariant'0 x
  
  predicate completed'1 [#"../common.rs" 11 4 11 36] (self : borrowed i)
  
  predicate completed'0 [#"../07_fuse.rs" 16 4 16 35] (self : borrowed (Fuse'0.t_Fuse i)) =
    [%#span28] (T_07_fuse__Fuse.t_Fuse__iter self.current = Option'0.C_None
    \/ (exists it : borrowed i . inv'3 it
    /\ completed'1 it /\ T_07_fuse__Fuse.t_Fuse__iter self.current = Option'0.C_Some (it.current)))
    /\ T_07_fuse__Fuse.t_Fuse__iter self.final = Option'0.C_None
  
  constant self  : borrowed (Fuse'0.t_Fuse i)
  
  constant steps  : Seq.seq t_Item'0
  
  constant next  : Fuse'0.t_Fuse i
  
  function is_fused [#"../07_fuse.rs" 91 4 91 62] (self : borrowed (Fuse'0.t_Fuse i)) (steps : Seq.seq t_Item'0) (next : Fuse'0.t_Fuse i) : ()
    
  
  goal vc_is_fused : ([%#s07_fuse4] produces'0 self.final steps next)
   -> ([%#s07_fuse3] completed'0 self)
   -> ([%#s07_fuse2] inv'2 steps)
   -> ([%#s07_fuse1] inv'1 next)
   -> ([%#s07_fuse0] inv'0 self)  -> ([%#s07_fuse5] steps = (Seq.empty  : Seq.seq t_Item'0) /\ self.final = next)
end
module M_07_fuse__qyi2452592938496686347 [#"../07_fuse.rs" 11 0 11 38] (* <Fuse<I> as common::Iterator> *)
  type i
  
  let%span s07_fuse0 = "../07_fuse.rs" 56 4 56 26
  let%span s07_fuse1 = "../07_fuse.rs" 66 4 66 90
  let%span s07_fuse2 = "../07_fuse.rs" 39 4 39 44
  let%span span3 = "../../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span span4 = "../07_fuse.rs" 18 12 19 32
  let%span span5 = "../07_fuse.rs" 26 8 32 9
  
  predicate invariant'3 (self : i)
  
  predicate inv'6 (_1 : i)
  
  axiom inv'6 : forall x : i [inv'6 x] . inv'6 x  -> invariant'3 x
  
  type t_Item'0
  
  predicate invariant'2 (self : t_Item'0)
  
  predicate inv'5 (_1 : t_Item'0)
  
  axiom inv'5 : forall x : t_Item'0 [inv'5 x] . inv'5 x  -> invariant'2 x
  
  use T_core__option__Option as Option'0
  
  predicate inv'4 (_1 : Option'0.t_Option i)
  
  axiom inv'4 [@rewrite] : forall x : Option'0.t_Option i [inv'4 x] . inv'4 x
  = match x with
    | Option'0.C_None -> true
    | Option'0.C_Some a_0 -> inv'6 a_0
    end
  
  use prelude.prelude.Borrow
  
  predicate invariant'1 (self : borrowed i) =
    [%#span3] inv'6 self.current /\ inv'6 self.final
  
  predicate inv'3 (_1 : borrowed i)
  
  axiom inv'3 [@rewrite] : forall x : borrowed i [inv'3 x] . inv'3 x = invariant'1 x
  
  predicate inv'2 (_1 : Option'0.t_Option t_Item'0)
  
  axiom inv'2 [@rewrite] : forall x : Option'0.t_Option t_Item'0 [inv'2 x] . inv'2 x
  = match x with
    | Option'0.C_None -> true
    | Option'0.C_Some a_0 -> inv'5 a_0
    end
  
  use T_07_fuse__Fuse as Fuse'0
  
  predicate inv'0 (_1 : Fuse'0.t_Fuse i)
  
  predicate invariant'0 (self : borrowed (Fuse'0.t_Fuse i)) =
    [%#span3] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'1 (_1 : borrowed (Fuse'0.t_Fuse i))
  
  axiom inv'1 [@rewrite] : forall x : borrowed (Fuse'0.t_Fuse i) [inv'1 x] . inv'1 x = invariant'0 x
  
  axiom inv'0 [@rewrite] : forall x : Fuse'0.t_Fuse i [inv'0 x] . inv'0 x
  = match x with
    | Fuse'0.C_Fuse iter -> inv'4 iter
    end
  
  use seq.Seq
  
  predicate completed'1 [#"../common.rs" 11 4 11 36] (self : borrowed i)
  
  use T_07_fuse__Fuse as T_07_fuse__Fuse
  
  predicate completed'0 [#"../07_fuse.rs" 16 4 16 35] (self : borrowed (Fuse'0.t_Fuse i)) =
    [%#span4] (T_07_fuse__Fuse.t_Fuse__iter self.current = Option'0.C_None
    \/ (exists it : borrowed i . inv'3 it
    /\ completed'1 it /\ T_07_fuse__Fuse.t_Fuse__iter self.current = Option'0.C_Some (it.current)))
    /\ T_07_fuse__Fuse.t_Fuse__iter self.final = Option'0.C_None
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'1 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq.seq t_Item'0) (o : i)
  
  use seq.Seq
  
  predicate produces'0 [#"../07_fuse.rs" 25 4 25 65] (self : Fuse'0.t_Fuse i) (prod : Seq.seq t_Item'0) (other : Fuse'0.t_Fuse i)
    
   =
    [%#span5] match T_07_fuse__Fuse.t_Fuse__iter self with
      | Option'0.C_None -> prod = (Seq.empty  : Seq.seq t_Item'0)
      /\ T_07_fuse__Fuse.t_Fuse__iter other = T_07_fuse__Fuse.t_Fuse__iter self
      | Option'0.C_Some i -> match T_07_fuse__Fuse.t_Fuse__iter other with
        | Option'0.C_Some i2 -> produces'1 i prod i2
        | Option'0.C_None -> false
        end
      end
  
  goal produces_refl_refn : [%#s07_fuse0] forall self : Fuse'0.t_Fuse i . inv'0 self
   -> inv'0 self
  /\ (forall result : () . produces'0 self (Seq.empty  : Seq.seq t_Item'0) self
   -> produces'0 self (Seq.empty  : Seq.seq t_Item'0) self)
  
  goal produces_trans_refn : [%#s07_fuse1] forall a : Fuse'0.t_Fuse i . forall ab : Seq.seq t_Item'0 . forall b : Fuse'0.t_Fuse i . forall bc : Seq.seq t_Item'0 . forall c : Fuse'0.t_Fuse i . produces'0 b bc c
  /\ produces'0 a ab b /\ inv'0 c /\ inv'0 b /\ inv'0 a
   -> produces'0 b bc c
  /\ produces'0 a ab b
  /\ inv'0 c
  /\ inv'0 b /\ inv'0 a /\ (forall result : () . produces'0 a (Seq.(++) ab bc) c  -> produces'0 a (Seq.(++) ab bc) c)
  
  goal next_refn : [%#s07_fuse2] forall self : borrowed (Fuse'0.t_Fuse i) . inv'1 self
   -> inv'1 self
  /\ (forall result : Option'0.t_Option t_Item'0 . inv'2 result
  /\ match result with
    | Option'0.C_None -> completed'0 self
    | Option'0.C_Some v -> produces'0 self.current (Seq.singleton v) self.final
    end
   -> inv'2 result
  /\ match result with
    | Option'0.C_None -> completed'0 self
    | Option'0.C_Some v -> produces'0 self.current (Seq.singleton v) self.final
    end)
end
module M_07_fuse__qyi3347558734837599430 [#"../07_fuse.rs" 82 0 82 43] (* <Fuse<I> as FusedIterator> *)
  type i
  
  let%span s07_fuse0 = "../07_fuse.rs" 91 4 91 62
  let%span span1 = "../../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  let%span span2 = "../../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span span3 = "../../../../../creusot-contracts/src/logic/seq.rs" 198 8 198 97
  let%span span4 = "../07_fuse.rs" 18 12 19 32
  let%span span5 = "../07_fuse.rs" 26 8 32 9
  
  type t_Item'0
  
  predicate invariant'5 (self : t_Item'0)
  
  predicate inv'7 (_1 : t_Item'0)
  
  axiom inv'7 : forall x : t_Item'0 [inv'7 x] . inv'7 x  -> invariant'5 x
  
  predicate invariant'4 (self : i)
  
  predicate inv'6 (_1 : i)
  
  axiom inv'6 : forall x : i [inv'6 x] . inv'6 x  -> invariant'4 x
  
  use T_alloc__alloc__Global as Global'0
  
  predicate invariant'3 (self : t_Item'0) =
    [%#span1] inv'7 self
  
  predicate inv'5 (_1 : t_Item'0)
  
  axiom inv'5 [@rewrite] : forall x : t_Item'0 [inv'5 x] . inv'5 x = invariant'3 x
  
  use T_core__option__Option as Option'0
  
  predicate inv'4 (_1 : Option'0.t_Option i)
  
  axiom inv'4 [@rewrite] : forall x : Option'0.t_Option i [inv'4 x] . inv'4 x
  = match x with
    | Option'0.C_None -> true
    | Option'0.C_Some a_0 -> inv'6 a_0
    end
  
  use prelude.prelude.Borrow
  
  predicate invariant'2 (self : borrowed i) =
    [%#span2] inv'6 self.current /\ inv'6 self.final
  
  predicate inv'3 (_1 : borrowed i)
  
  axiom inv'3 [@rewrite] : forall x : borrowed i [inv'3 x] . inv'3 x = invariant'2 x
  
  use T_07_fuse__Fuse as Fuse'0
  
  predicate inv'1 (_1 : Fuse'0.t_Fuse i)
  
  predicate invariant'1 (self : borrowed (Fuse'0.t_Fuse i)) =
    [%#span2] inv'1 self.current /\ inv'1 self.final
  
  predicate inv'2 (_1 : borrowed (Fuse'0.t_Fuse i))
  
  axiom inv'2 [@rewrite] : forall x : borrowed (Fuse'0.t_Fuse i) [inv'2 x] . inv'2 x = invariant'1 x
  
  axiom inv'1 [@rewrite] : forall x : Fuse'0.t_Fuse i [inv'1 x] . inv'1 x
  = match x with
    | Fuse'0.C_Fuse iter -> inv'4 iter
    end
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  predicate invariant'0 (self : Seq.seq t_Item'0) =
    [%#span3] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'5 (Seq.get self i)
  
  predicate inv'0 (_1 : Seq.seq t_Item'0)
  
  axiom inv'0 [@rewrite] : forall x : Seq.seq t_Item'0 [inv'0 x] . inv'0 x = invariant'0 x
  
  use seq.Seq
  
  use seq.Seq
  
  predicate completed'1 [#"../common.rs" 11 4 11 36] (self : borrowed i)
  
  use T_07_fuse__Fuse as T_07_fuse__Fuse
  
  predicate completed'0 [#"../07_fuse.rs" 16 4 16 35] (self : borrowed (Fuse'0.t_Fuse i)) =
    [%#span4] (T_07_fuse__Fuse.t_Fuse__iter self.current = Option'0.C_None
    \/ (exists it : borrowed i . inv'3 it
    /\ completed'1 it /\ T_07_fuse__Fuse.t_Fuse__iter self.current = Option'0.C_Some (it.current)))
    /\ T_07_fuse__Fuse.t_Fuse__iter self.final = Option'0.C_None
  
  predicate produces'1 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq.seq t_Item'0) (o : i)
  
  predicate produces'0 [#"../07_fuse.rs" 25 4 25 65] (self : Fuse'0.t_Fuse i) (prod : Seq.seq t_Item'0) (other : Fuse'0.t_Fuse i)
    
   =
    [%#span5] match T_07_fuse__Fuse.t_Fuse__iter self with
      | Option'0.C_None -> prod = (Seq.empty  : Seq.seq t_Item'0)
      /\ T_07_fuse__Fuse.t_Fuse__iter other = T_07_fuse__Fuse.t_Fuse__iter self
      | Option'0.C_Some i -> match T_07_fuse__Fuse.t_Fuse__iter other with
        | Option'0.C_Some i2 -> produces'1 i prod i2
        | Option'0.C_None -> false
        end
      end
  
  goal is_fused_refn : [%#s07_fuse0] forall self : borrowed (Fuse'0.t_Fuse i) . forall steps : Seq.seq t_Item'0 . forall next : Fuse'0.t_Fuse i . produces'0 self.final steps next
  /\ completed'0 self /\ inv'0 steps /\ inv'1 next /\ inv'2 self
   -> produces'0 self.final steps next
  /\ completed'0 self
  /\ inv'0 steps
  /\ inv'1 next
  /\ inv'2 self
  /\ (forall result : () . steps = (Seq.empty  : Seq.seq t_Item'0) /\ self.final = next
   -> steps = (Seq.empty  : Seq.seq t_Item'0) /\ self.final = next)
end
