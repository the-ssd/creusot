
module T_14_copied__Copied [#"../14_copied.rs" 9 0 9 20]
  type t_Copied 'i =
    | C_Copied 'i
  
  function any_l (_ : 'b) : 'a
  
  let rec t_Copied < 'i > (input:t_Copied 'i) (ret  (iter:'i))= any
    [ good (iter:'i)-> {C_Copied iter = input} (! ret {iter}) ]
    
  
  function t_Copied__iter (self : t_Copied 'i) : 'i =
    match self with
      | C_Copied a -> a
      end
end
module T_alloc__alloc__Global
  type t_Global  =
    | C_Global
  
  function any_l (_ : 'b) : 'a
  
  let rec t_Global (input:t_Global) (ret  )= any [ good -> {C_Global  = input} (! ret) ] 
end
module M_14_copied__qyi6387100604932246480__produces_refl [#"../14_copied.rs" 41 4 41 26] (* <Copied<I> as common::Iterator> *)
  type i
  
  type t
  
  let%span s14_copied0 = "../14_copied.rs" 39 15 39 24
  let%span s14_copied1 = "../14_copied.rs" 40 14 40 45
  let%span span2 = "../../../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  let%span span3 = "../../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  let%span span4 = "../common.rs" 19 15 19 21
  let%span span5 = "../common.rs" 20 15 20 21
  let%span span6 = "../common.rs" 21 15 21 21
  let%span span7 = "../common.rs" 22 15 22 32
  let%span span8 = "../common.rs" 23 15 23 32
  let%span span9 = "../common.rs" 24 14 24 42
  let%span span10 = "../common.rs" 14 15 14 24
  let%span span11 = "../common.rs" 15 14 15 45
  let%span span12 = "../../../../../creusot-contracts/src/logic/seq.rs" 198 8 198 97
  let%span span13 = "../14_copied.rs" 29 8 34 9
  
  predicate invariant'4 (self : t)
  
  predicate inv'5 (_1 : t)
  
  axiom inv'5 : forall x : t [inv'5 x] . inv'5 x  -> invariant'4 x
  
  use prelude.prelude.Borrow
  
  predicate invariant'3 (self : t) =
    [%#span2] inv'5 self
  
  predicate inv'4 (_1 : t)
  
  axiom inv'4 [@rewrite] : forall x : t [inv'4 x] . inv'4 x = invariant'3 x
  
  use T_alloc__alloc__Global as Global'0
  
  predicate invariant'2 (self : t) =
    [%#span3] inv'4 self
  
  predicate inv'3 (_1 : t)
  
  axiom inv'3 [@rewrite] : forall x : t [inv'3 x] . inv'3 x = invariant'2 x
  
  predicate invariant'1 (self : i)
  
  predicate inv'2 (_1 : i)
  
  axiom inv'2 : forall x : i [inv'2 x] . inv'2 x  -> invariant'1 x
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'1 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq.seq t) (o : i)
  
  function produces_trans'0 [#"../common.rs" 25 4 25 91] (a : i) (ab : Seq.seq t) (b : i) (bc : Seq.seq t) (c : i) : ()
  
  axiom produces_trans'0_spec : forall a : i, ab : Seq.seq t, b : i, bc : Seq.seq t, c : i . ([%#span4] inv'2 a)
   -> ([%#span5] inv'2 b)
   -> ([%#span6] inv'2 c)
   -> ([%#span7] produces'1 a ab b)  -> ([%#span8] produces'1 b bc c)  -> ([%#span9] produces'1 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'0 [#"../common.rs" 16 4 16 27] (self : i) : ()
  
  axiom produces_refl'0_spec : forall self : i . ([%#span10] inv'2 self)
   -> ([%#span11] produces'1 self (Seq.empty  : Seq.seq t) self)
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  predicate invariant'0 (self : Seq.seq t) =
    [%#span12] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'3 (Seq.get self i)
  
  predicate inv'1 (_1 : Seq.seq t)
  
  axiom inv'1 [@rewrite] : forall x : Seq.seq t [inv'1 x] . inv'1 x = invariant'0 x
  
  use T_14_copied__Copied as Copied'0
  
  predicate inv'0 (_1 : Copied'0.t_Copied i)
  
  axiom inv'0 [@rewrite] : forall x : Copied'0.t_Copied i [inv'0 x] . inv'0 x
  = match x with
    | Copied'0.C_Copied iter -> inv'2 iter
    end
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use T_14_copied__Copied as T_14_copied__Copied
  
  predicate produces'0 [#"../14_copied.rs" 28 4 28 64] (self : Copied'0.t_Copied i) (visited : Seq.seq t) (o : Copied'0.t_Copied i)
    
   =
    [%#span13] exists s : Seq.seq t . inv'1 s
    /\ produces'1 (T_14_copied__Copied.t_Copied__iter self) s (T_14_copied__Copied.t_Copied__iter o)
    /\ Seq.length visited = Seq.length s
    /\ (forall i : int . 0 <= i /\ i < Seq.length s  -> Seq.get visited i = Seq.get s i)
  
  use seq.Seq
  
  constant self  : Copied'0.t_Copied i
  
  function produces_refl [#"../14_copied.rs" 41 4 41 26] (self : Copied'0.t_Copied i) : ()
  
  goal vc_produces_refl : ([%#s14_copied0] inv'0 self)
   -> ([%#s14_copied1] produces'0 self (Seq.empty  : Seq.seq t) self)
end
module M_14_copied__qyi6387100604932246480__produces_trans [#"../14_copied.rs" 51 4 51 90] (* <Copied<I> as common::Iterator> *)
  type i
  
  type t
  
  let%span s14_copied0 = "../14_copied.rs" 45 15 45 21
  let%span s14_copied1 = "../14_copied.rs" 46 15 46 21
  let%span s14_copied2 = "../14_copied.rs" 47 15 47 21
  let%span s14_copied3 = "../14_copied.rs" 48 15 48 32
  let%span s14_copied4 = "../14_copied.rs" 49 15 49 32
  let%span s14_copied5 = "../14_copied.rs" 50 14 50 42
  let%span span6 = "../../../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  let%span span7 = "../../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  let%span span8 = "../common.rs" 19 15 19 21
  let%span span9 = "../common.rs" 20 15 20 21
  let%span span10 = "../common.rs" 21 15 21 21
  let%span span11 = "../common.rs" 22 15 22 32
  let%span span12 = "../common.rs" 23 15 23 32
  let%span span13 = "../common.rs" 24 14 24 42
  let%span span14 = "../common.rs" 14 15 14 24
  let%span span15 = "../common.rs" 15 14 15 45
  let%span span16 = "../../../../../creusot-contracts/src/logic/seq.rs" 198 8 198 97
  let%span span17 = "../14_copied.rs" 29 8 34 9
  
  predicate invariant'4 (self : t)
  
  predicate inv'5 (_1 : t)
  
  axiom inv'5 : forall x : t [inv'5 x] . inv'5 x  -> invariant'4 x
  
  use prelude.prelude.Borrow
  
  predicate invariant'3 (self : t) =
    [%#span6] inv'5 self
  
  predicate inv'4 (_1 : t)
  
  axiom inv'4 [@rewrite] : forall x : t [inv'4 x] . inv'4 x = invariant'3 x
  
  use T_alloc__alloc__Global as Global'0
  
  predicate invariant'2 (self : t) =
    [%#span7] inv'4 self
  
  predicate inv'3 (_1 : t)
  
  axiom inv'3 [@rewrite] : forall x : t [inv'3 x] . inv'3 x = invariant'2 x
  
  predicate invariant'1 (self : i)
  
  predicate inv'2 (_1 : i)
  
  axiom inv'2 : forall x : i [inv'2 x] . inv'2 x  -> invariant'1 x
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'1 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq.seq t) (o : i)
  
  function produces_trans'0 [#"../common.rs" 25 4 25 91] (a : i) (ab : Seq.seq t) (b : i) (bc : Seq.seq t) (c : i) : ()
  
  axiom produces_trans'0_spec : forall a : i, ab : Seq.seq t, b : i, bc : Seq.seq t, c : i . ([%#span8] inv'2 a)
   -> ([%#span9] inv'2 b)
   -> ([%#span10] inv'2 c)
   -> ([%#span11] produces'1 a ab b)  -> ([%#span12] produces'1 b bc c)  -> ([%#span13] produces'1 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'0 [#"../common.rs" 16 4 16 27] (self : i) : ()
  
  axiom produces_refl'0_spec : forall self : i . ([%#span14] inv'2 self)
   -> ([%#span15] produces'1 self (Seq.empty  : Seq.seq t) self)
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  predicate invariant'0 (self : Seq.seq t) =
    [%#span16] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'3 (Seq.get self i)
  
  predicate inv'1 (_1 : Seq.seq t)
  
  axiom inv'1 [@rewrite] : forall x : Seq.seq t [inv'1 x] . inv'1 x = invariant'0 x
  
  use T_14_copied__Copied as Copied'0
  
  predicate inv'0 (_1 : Copied'0.t_Copied i)
  
  axiom inv'0 [@rewrite] : forall x : Copied'0.t_Copied i [inv'0 x] . inv'0 x
  = match x with
    | Copied'0.C_Copied iter -> inv'2 iter
    end
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use T_14_copied__Copied as T_14_copied__Copied
  
  predicate produces'0 [#"../14_copied.rs" 28 4 28 64] (self : Copied'0.t_Copied i) (visited : Seq.seq t) (o : Copied'0.t_Copied i)
    
   =
    [%#span17] exists s : Seq.seq t . inv'1 s
    /\ produces'1 (T_14_copied__Copied.t_Copied__iter self) s (T_14_copied__Copied.t_Copied__iter o)
    /\ Seq.length visited = Seq.length s
    /\ (forall i : int . 0 <= i /\ i < Seq.length s  -> Seq.get visited i = Seq.get s i)
  
  constant a  : Copied'0.t_Copied i
  
  constant ab  : Seq.seq t
  
  constant b  : Copied'0.t_Copied i
  
  constant bc  : Seq.seq t
  
  constant c  : Copied'0.t_Copied i
  
  function produces_trans [#"../14_copied.rs" 51 4 51 90] (a : Copied'0.t_Copied i) (ab : Seq.seq t) (b : Copied'0.t_Copied i) (bc : Seq.seq t) (c : Copied'0.t_Copied i) : ()
    
  
  goal vc_produces_trans : ([%#s14_copied4] produces'0 b bc c)
   -> ([%#s14_copied3] produces'0 a ab b)
   -> ([%#s14_copied2] inv'0 c)
   -> ([%#s14_copied1] inv'0 b)  -> ([%#s14_copied0] inv'0 a)  -> ([%#s14_copied5] produces'0 a (Seq.(++) ab bc) c)
end
module T_core__option__Option
  type t_Option 't =
    | C_None
    | C_Some 't
  
  function any_l (_ : 'b) : 'a
  
  let rec v_None < 't > (input:t_Option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} (! {false} any) ]
    
  
  let rec v_Some < 't > (input:t_Option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : 't [C_Some field_0 : t_Option 't] . C_Some field_0 <> input} (! {false} any) ]
    
end
module M_14_copied__qyi6387100604932246480__next [#"../14_copied.rs" 57 4 57 35] (* <Copied<I> as common::Iterator> *)
  type i
  
  type t
  
  let%span s14_copied0 = "../14_copied.rs" 57 17 57 21
  let%span s14_copied1 = "../14_copied.rs" 53 14 56 5
  let%span s14_copied2 = "../14_copied.rs" 57 26 57 35
  let%span span3 = "../../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  let%span span4 = "../../../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  let%span span5 = "../../../../../creusot-contracts/src/logic/seq.rs" 198 8 198 97
  let%span span6 = "../../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span span7 = "../common.rs" 19 15 19 21
  let%span span8 = "../common.rs" 20 15 20 21
  let%span span9 = "../common.rs" 21 15 21 21
  let%span span10 = "../common.rs" 22 15 22 32
  let%span span11 = "../common.rs" 23 15 23 32
  let%span span12 = "../common.rs" 24 14 24 42
  let%span span13 = "../common.rs" 14 15 14 24
  let%span span14 = "../common.rs" 15 14 15 45
  let%span span15 = "../14_copied.rs" 29 8 34 9
  let%span span16 = "../14_copied.rs" 23 8 23 43
  let%span span17 = "" 0 0 0 0
  let%span span18 = "../../../../../creusot-contracts/src/std/option.rs" 99 16 99 59
  let%span span19 = "../../../../../creusot-contracts/src/std/option.rs" 30 0 141 1
  let%span span20 = "" 0 0 0 0
  let%span span21 = "../../../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  let%span span22 = "../common.rs" 31 17 31 21
  let%span span23 = "../common.rs" 27 14 30 5
  let%span span24 = "../common.rs" 31 26 31 44
  
  predicate inv'7 (_1 : t)
  
  use T_alloc__alloc__Global as Global'0
  
  predicate invariant'6 (self : t) =
    [%#span3] inv'7 self
  
  predicate inv'9 (_1 : t)
  
  axiom inv'9 [@rewrite] : forall x : t [inv'9 x] . inv'9 x = invariant'6 x
  
  predicate inv'0 (_1 : i)
  
  use T_14_copied__Copied as Copied'0
  
  predicate inv'8 (_1 : Copied'0.t_Copied i)
  
  axiom inv'8 [@rewrite] : forall x : Copied'0.t_Copied i [inv'8 x] . inv'8 x
  = match x with
    | Copied'0.C_Copied iter -> inv'0 iter
    end
  
  predicate inv'6 (_1 : t)
  
  use prelude.prelude.Borrow
  
  predicate invariant'5 (self : t) =
    [%#span4] inv'6 self
  
  axiom inv'7 [@rewrite] : forall x : t [inv'7 x] . inv'7 x = invariant'5 x
  
  predicate invariant'4 (self : t)
  
  axiom inv'6 : forall x : t [inv'6 x] . inv'6 x  -> invariant'4 x
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  predicate invariant'3 (self : Seq.seq t) =
    [%#span5] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'9 (Seq.get self i)
  
  predicate inv'5 (_1 : Seq.seq t)
  
  axiom inv'5 [@rewrite] : forall x : Seq.seq t [inv'5 x] . inv'5 x = invariant'3 x
  
  use T_core__option__Option as Option'0
  
  predicate inv'4 (_1 : Option'0.t_Option t)
  
  axiom inv'4 [@rewrite] : forall x : Option'0.t_Option t [inv'4 x] . inv'4 x
  = match x with
    | Option'0.C_None -> true
    | Option'0.C_Some a_0 -> inv'7 a_0
    end
  
  predicate invariant'2 (self : borrowed i) =
    [%#span6] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'3 (_1 : borrowed i)
  
  axiom inv'3 [@rewrite] : forall x : borrowed i [inv'3 x] . inv'3 x = invariant'2 x
  
  predicate inv'2 (_1 : Option'0.t_Option t)
  
  axiom inv'2 [@rewrite] : forall x : Option'0.t_Option t [inv'2 x] . inv'2 x
  = match x with
    | Option'0.C_None -> true
    | Option'0.C_Some a_0 -> inv'6 a_0
    end
  
  predicate invariant'1 (self : borrowed (Copied'0.t_Copied i)) =
    [%#span6] inv'8 self.current /\ inv'8 self.final
  
  predicate inv'1 (_1 : borrowed (Copied'0.t_Copied i))
  
  axiom inv'1 [@rewrite] : forall x : borrowed (Copied'0.t_Copied i) [inv'1 x] . inv'1 x = invariant'1 x
  
  use seq.Seq
  
  predicate produces'1 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq.seq t) (o : i)
  
  function produces_trans'0 [#"../common.rs" 25 4 25 91] (a : i) (ab : Seq.seq t) (b : i) (bc : Seq.seq t) (c : i) : ()
  
  axiom produces_trans'0_spec : forall a : i, ab : Seq.seq t, b : i, bc : Seq.seq t, c : i . ([%#span7] inv'0 a)
   -> ([%#span8] inv'0 b)
   -> ([%#span9] inv'0 c)
   -> ([%#span10] produces'1 a ab b)  -> ([%#span11] produces'1 b bc c)  -> ([%#span12] produces'1 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'0 [#"../common.rs" 16 4 16 27] (self : i) : ()
  
  axiom produces_refl'0_spec : forall self : i . ([%#span13] inv'0 self)
   -> ([%#span14] produces'1 self (Seq.empty  : Seq.seq t) self)
  
  predicate invariant'0 (self : i)
  
  axiom inv'0 : forall x : i [inv'0 x] . inv'0 x  -> invariant'0 x
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use T_14_copied__Copied as T_14_copied__Copied
  
  predicate produces'0 [#"../14_copied.rs" 28 4 28 64] (self : Copied'0.t_Copied i) (visited : Seq.seq t) (o : Copied'0.t_Copied i)
    
   =
    [%#span15] exists s : Seq.seq t . inv'5 s
    /\ produces'1 (T_14_copied__Copied.t_Copied__iter self) s (T_14_copied__Copied.t_Copied__iter o)
    /\ Seq.length visited = Seq.length s
    /\ (forall i : int . 0 <= i /\ i < Seq.length s  -> Seq.get visited i = Seq.get s i)
  
  use seq.Seq
  
  predicate completed'1 [#"../common.rs" 11 4 11 36] (self : borrowed i)
  
  predicate completed'0 [#"../14_copied.rs" 22 4 22 35] (self : borrowed (Copied'0.t_Copied i)) =
    [%#span16] completed'1 (Borrow.borrow_logic (T_14_copied__Copied.t_Copied__iter self.current) (T_14_copied__Copied.t_Copied__iter self.final) (Borrow.inherit_id (Borrow.get_id self) 1))
  
  use prelude.prelude.Intrinsic
  
  let rec copied'0 (self:Option'0.t_Option t) (return'  (ret:Option'0.t_Option t))= {[@expl:precondition] [%#span17] inv'4 self}
    any
    [ return' (result:Option'0.t_Option t)-> {[%#span20] inv'2 result}
      {[%#span19] self = Option'0.C_None \/ (exists t : t . self = Option'0.C_Some t /\ result = Option'0.C_Some t)}
      {[%#span18] self = Option'0.C_None  -> result = Option'0.C_None}
      (! return' {result}) ]
    
  
  predicate resolve'1 (self : borrowed (Copied'0.t_Copied i)) =
    [%#span21] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed (Copied'0.t_Copied i)) =
    resolve'1 _1
  
  use seq.Seq
  
  let rec next'0 (self:borrowed i) (return'  (ret:Option'0.t_Option t))= {[@expl:precondition] [%#span22] inv'3 self}
    any
    [ return' (result:Option'0.t_Option t)-> {[%#span24] inv'4 result}
      {[%#span23] match result with
        | Option'0.C_None -> completed'1 self
        | Option'0.C_Some v -> produces'1 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
    
  
  meta "compute_max_steps" 1000000
  
  let rec next (self:borrowed (Copied'0.t_Copied i)) (return'  (ret:Option'0.t_Option t))= {[%#s14_copied0] inv'1 self}
    (! bb0
    [ bb0 = s0
      [ s0 = Copied'0.t_Copied <i> {self.current}
          (fun (riter'0:i) ->
            {inv'0 riter'0}
            Borrow.borrow_final <i> {riter'0} {Borrow.inherit_id (Borrow.get_id self) 1}
              (fun (_ret':borrowed i) ->
                 [ &_4 <- _ret' ] 
                -{inv'0 _ret'.final}-
                 [ &self <- { self with current = Copied'0.C_Copied _ret'.final ; } ] 
                s1))
      | s1 = next'0 {_4} (fun (_ret':Option'0.t_Option t) ->  [ &_3 <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = s0
      [ s0 = {[@expl:type invariant] inv'1 self} s1
      | s1 = -{resolve'0 self}- s2
      | s2 = copied'0 {_3} (fun (_ret':Option'0.t_Option t) ->  [ &_0 <- _ret' ] s3)
      | s3 = bb2 ]
      
    | bb2 = return' {_0} ]
    )
    [ & _0 : Option'0.t_Option t = any_l ()
    | & self : borrowed (Copied'0.t_Copied i) = self
    | & _3 : Option'0.t_Option t = any_l ()
    | & _4 : borrowed i = any_l () ]
    
    [ return' (result:Option'0.t_Option t)-> {[@expl:postcondition] [%#s14_copied2] inv'2 result}
      {[@expl:postcondition] [%#s14_copied1] match result with
        | Option'0.C_None -> completed'0 self
        | Option'0.C_Some v -> produces'0 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
    
end
module M_14_copied__qyi6387100604932246480 [#"../14_copied.rs" 13 0 16 12] (* <Copied<I> as common::Iterator> *)
  type i
  
  type t
  
  let%span s14_copied0 = "../14_copied.rs" 41 4 41 26
  let%span s14_copied1 = "../14_copied.rs" 57 4 57 35
  let%span s14_copied2 = "../14_copied.rs" 51 4 51 90
  let%span span3 = "../../../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  let%span span4 = "../../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  let%span span5 = "../../../../../creusot-contracts/src/logic/seq.rs" 198 8 198 97
  let%span span6 = "../../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span span7 = "../14_copied.rs" 23 8 23 43
  let%span span8 = "../14_copied.rs" 29 8 34 9
  
  predicate inv'5 (_1 : t)
  
  use prelude.prelude.Borrow
  
  predicate invariant'5 (self : t) =
    [%#span3] inv'5 self
  
  predicate inv'7 (_1 : t)
  
  axiom inv'7 [@rewrite] : forall x : t [inv'7 x] . inv'7 x = invariant'5 x
  
  use T_alloc__alloc__Global as Global'0
  
  predicate invariant'4 (self : t) =
    [%#span4] inv'7 self
  
  predicate inv'6 (_1 : t)
  
  axiom inv'6 [@rewrite] : forall x : t [inv'6 x] . inv'6 x = invariant'4 x
  
  predicate invariant'3 (self : t)
  
  axiom inv'5 : forall x : t [inv'5 x] . inv'5 x  -> invariant'3 x
  
  predicate invariant'2 (self : i)
  
  predicate inv'4 (_1 : i)
  
  axiom inv'4 : forall x : i [inv'4 x] . inv'4 x  -> invariant'2 x
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  predicate invariant'1 (self : Seq.seq t) =
    [%#span5] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'6 (Seq.get self i)
  
  predicate inv'3 (_1 : Seq.seq t)
  
  axiom inv'3 [@rewrite] : forall x : Seq.seq t [inv'3 x] . inv'3 x = invariant'1 x
  
  use T_core__option__Option as Option'0
  
  predicate inv'2 (_1 : Option'0.t_Option t)
  
  axiom inv'2 [@rewrite] : forall x : Option'0.t_Option t [inv'2 x] . inv'2 x
  = match x with
    | Option'0.C_None -> true
    | Option'0.C_Some a_0 -> inv'5 a_0
    end
  
  use T_14_copied__Copied as Copied'0
  
  predicate inv'0 (_1 : Copied'0.t_Copied i)
  
  predicate invariant'0 (self : borrowed (Copied'0.t_Copied i)) =
    [%#span6] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'1 (_1 : borrowed (Copied'0.t_Copied i))
  
  axiom inv'1 [@rewrite] : forall x : borrowed (Copied'0.t_Copied i) [inv'1 x] . inv'1 x = invariant'0 x
  
  axiom inv'0 [@rewrite] : forall x : Copied'0.t_Copied i [inv'0 x] . inv'0 x
  = match x with
    | Copied'0.C_Copied iter -> inv'4 iter
    end
  
  use seq.Seq
  
  use seq.Seq
  
  predicate completed'1 [#"../common.rs" 11 4 11 36] (self : borrowed i)
  
  use T_14_copied__Copied as T_14_copied__Copied
  
  predicate completed'0 [#"../14_copied.rs" 22 4 22 35] (self : borrowed (Copied'0.t_Copied i)) =
    [%#span7] completed'1 (Borrow.borrow_logic (T_14_copied__Copied.t_Copied__iter self.current) (T_14_copied__Copied.t_Copied__iter self.final) (Borrow.inherit_id (Borrow.get_id self) 1))
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'1 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq.seq t) (o : i)
  
  predicate produces'0 [#"../14_copied.rs" 28 4 28 64] (self : Copied'0.t_Copied i) (visited : Seq.seq t) (o : Copied'0.t_Copied i)
    
   =
    [%#span8] exists s : Seq.seq t . inv'3 s
    /\ produces'1 (T_14_copied__Copied.t_Copied__iter self) s (T_14_copied__Copied.t_Copied__iter o)
    /\ Seq.length visited = Seq.length s
    /\ (forall i : int . 0 <= i /\ i < Seq.length s  -> Seq.get visited i = Seq.get s i)
  
  use seq.Seq
  
  goal produces_refl_refn : [%#s14_copied0] forall self : Copied'0.t_Copied i . inv'0 self
   -> inv'0 self
  /\ (forall result : () . produces'0 self (Seq.empty  : Seq.seq t) self
   -> produces'0 self (Seq.empty  : Seq.seq t) self)
  
  goal next_refn : [%#s14_copied1] forall self : borrowed (Copied'0.t_Copied i) . inv'1 self
   -> inv'1 self
  /\ (forall result : Option'0.t_Option t . inv'2 result
  /\ match result with
    | Option'0.C_None -> completed'0 self
    | Option'0.C_Some v -> produces'0 self.current (Seq.singleton v) self.final
    end
   -> inv'2 result
  /\ match result with
    | Option'0.C_None -> completed'0 self
    | Option'0.C_Some v -> produces'0 self.current (Seq.singleton v) self.final
    end)
  
  goal produces_trans_refn : [%#s14_copied2] forall a : Copied'0.t_Copied i . forall ab : Seq.seq t . forall b : Copied'0.t_Copied i . forall bc : Seq.seq t . forall c : Copied'0.t_Copied i . produces'0 b bc c
  /\ produces'0 a ab b /\ inv'0 c /\ inv'0 b /\ inv'0 a
   -> produces'0 b bc c
  /\ produces'0 a ab b
  /\ inv'0 c
  /\ inv'0 b /\ inv'0 a /\ (forall result : () . produces'0 a (Seq.(++) ab bc) c  -> produces'0 a (Seq.(++) ab bc) c)
end
