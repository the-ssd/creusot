
module T_core__ptr__non_null__NonNull
  use prelude.prelude.Opaque
  
  type t_NonNull 't =
    | C_NonNull opaque_ptr
  
  function any_l (_ : 'b) : 'a
  
  let rec t_NonNull < 't > (input:t_NonNull 't) (ret  (pointer:opaque_ptr))= any
    [ good (pointer:opaque_ptr)-> {C_NonNull pointer = input} (! ret {pointer}) ]
    
end
module T_core__marker__PhantomData
  type t_PhantomData 't =
    | C_PhantomData
  
  function any_l (_ : 'b) : 'a
  
  let rec t_PhantomData < 't > (input:t_PhantomData 't) (ret  )= any [ good -> {C_PhantomData  = input} (! ret) ] 
end
module T_core__ptr__unique__Unique
  use T_core__marker__PhantomData as PhantomData'0
  
  use T_core__ptr__non_null__NonNull as NonNull'0
  
  type t_Unique 't =
    | C_Unique (NonNull'0.t_NonNull 't) (PhantomData'0.t_PhantomData 't)
  
  function any_l (_ : 'b) : 'a
  
  let rec t_Unique < 't > (input:t_Unique 't) (ret  (pointer:NonNull'0.t_NonNull 't) (_marker:PhantomData'0.t_PhantomData 't))= any
    [ good (pointer:NonNull'0.t_NonNull 't) (_marker:PhantomData'0.t_PhantomData 't)-> {C_Unique pointer _marker
      = input}
      (! ret {pointer} {_marker}) ]
    
end
module T_alloc__raw_vec__Cap
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  type t_Cap  =
    | C_Cap usize
  
  function any_l (_ : 'b) : 'a
  
  let rec t_Cap (input:t_Cap) (ret  (field_0:usize))= any
    [ good (field_0:usize)-> {C_Cap field_0 = input} (! ret {field_0}) ]
    
end
module T_alloc__raw_vec__RawVec
  use T_alloc__raw_vec__Cap as Cap'0
  
  use T_core__ptr__unique__Unique as Unique'0
  
  type t_RawVec 't 'a =
    | C_RawVec (Unique'0.t_Unique 't) (Cap'0.t_Cap) 'a
  
  function any_l (_ : 'b) : 'a
  
  let rec t_RawVec < 't > < 'a > (input:t_RawVec 't 'a) (ret  (ptr:Unique'0.t_Unique 't) (cap:Cap'0.t_Cap) (alloc:'a))= any
    [ good (ptr:Unique'0.t_Unique 't) (cap:Cap'0.t_Cap) (alloc:'a)-> {C_RawVec ptr cap alloc = input}
      (! ret {ptr} {cap} {alloc}) ]
    
end
module T_alloc__vec__Vec
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use T_alloc__raw_vec__RawVec as RawVec'0
  
  type t_Vec 't 'a =
    | C_Vec (RawVec'0.t_RawVec 't 'a) usize
  
  function any_l (_ : 'b) : 'a
  
  let rec t_Vec < 't > < 'a > (input:t_Vec 't 'a) (ret  (buf:RawVec'0.t_RawVec 't 'a) (len:usize))= any
    [ good (buf:RawVec'0.t_RawVec 't 'a) (len:usize)-> {C_Vec buf len = input} (! ret {buf} {len}) ]
    
end
module T_alloc__alloc__Global
  type t_Global  =
    | C_Global
  
  function any_l (_ : 'b) : 'a
  
  let rec t_Global (input:t_Global) (ret  )= any [ good -> {C_Global  = input} (! ret) ] 
end
module M_07_read_write__read_write [#"../07_read_write.rs" 6 0 6 75]
  type t
  
  let%span s07_read_write0 = "../07_read_write.rs" 8 4 8 22
  let%span s07_read_write1 = "../07_read_write.rs" 5 11 5 24
  let%span s07_read_write2 = "../07_read_write.rs" 6 44 6 45
  let%span s07_read_write3 = "../07_read_write.rs" 6 70 6 71
  let%span span4 = "../../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  let%span span5 = "../../../../../creusot-contracts/src/logic/seq.rs" 198 8 198 97
  let%span span6 = "../../../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  let%span span7 = "../../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span span8 = "" 0 0 0 0
  let%span span9 = "../../../../../creusot-contracts/src/std/vec.rs" 19 14 19 41
  let%span span10 = "../../../../../creusot-contracts/src/std/vec.rs" 68 20 68 41
  let%span span11 = "../../../../../creusot-contracts/src/model.rs" 108 8 108 31
  let%span span12 = "../../../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  let%span span13 = "../../../../../creusot-contracts/src/model.rs" 81 8 81 28
  let%span span14 = "" 0 0 0 0
  let%span span15 = "" 0 0 0 0
  let%span span16 = "../../../../../creusot-contracts/src/std/cmp.rs" 11 26 11 75
  let%span span17 = "../../../../../creusot-contracts/src/std/slice.rs" 133 20 133 37
  let%span span18 = "../../../../../creusot-contracts/src/std/slice.rs" 126 20 126 37
  let%span span19 = "../../../../../creusot-contracts/src/model.rs" 90 8 90 31
  let%span span20 = "../../../../../creusot-contracts/src/std/vec.rs" 165 27 165 46
  let%span span21 = "" 0 0 0 0
  let%span span22 = "" 0 0 0 0
  let%span span23 = "../../../../../creusot-contracts/src/std/vec.rs" 166 26 166 54
  let%span span24 = "" 0 0 0 0
  let%span span25 = "../../../../../creusot-contracts/src/std/slice.rs" 140 8 140 96
  let%span span26 = "../../../../../creusot-contracts/src/std/vec.rs" 155 27 155 46
  let%span span27 = "" 0 0 0 0
  let%span span28 = "" 0 0 0 0
  let%span span29 = "../../../../../creusot-contracts/src/std/vec.rs" 156 26 156 54
  let%span span30 = "../../../../../creusot-contracts/src/std/vec.rs" 157 26 157 57
  let%span span31 = "../../../../../creusot-contracts/src/std/vec.rs" 158 26 158 62
  let%span span32 = "../../../../../creusot-contracts/src/std/vec.rs" 159 26 159 55
  let%span span33 = "" 0 0 0 0
  
  predicate inv'3 (_1 : t)
  
  use T_alloc__alloc__Global as Global'0
  
  predicate invariant'8 (self : t) =
    [%#span4] inv'3 self
  
  predicate inv'8 (_1 : t)
  
  axiom inv'8 [@rewrite] : forall x : t [inv'8 x] . inv'8 x = invariant'8 x
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  predicate invariant'7 (self : Seq.seq t) =
    [%#span5] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'8 (Seq.get self i)
  
  predicate inv'7 (_1 : Seq.seq t)
  
  axiom inv'7 [@rewrite] : forall x : Seq.seq t [inv'7 x] . inv'7 x = invariant'7 x
  
  use prelude.prelude.Borrow
  
  predicate invariant'6 (self : t) =
    [%#span6] inv'3 self
  
  predicate inv'6 (_1 : t)
  
  axiom inv'6 [@rewrite] : forall x : t [inv'6 x] . inv'6 x = invariant'6 x
  
  use T_alloc__vec__Vec as Vec'0
  
  predicate inv'0 (_1 : Vec'0.t_Vec t (Global'0.t_Global))
  
  predicate invariant'5 (self : Vec'0.t_Vec t (Global'0.t_Global)) =
    [%#span6] inv'0 self
  
  predicate inv'5 (_1 : Vec'0.t_Vec t (Global'0.t_Global))
  
  axiom inv'5 [@rewrite] : forall x : Vec'0.t_Vec t (Global'0.t_Global) [inv'5 x] . inv'5 x = invariant'5 x
  
  use prelude.prelude.UIntSize
  
  predicate inv'4 (_1 : usize)
  
  axiom inv'4 [@rewrite] : forall x : usize [inv'4 x] . inv'4 x = true
  
  predicate invariant'3 (self : t)
  
  axiom inv'3 : forall x : t [inv'3 x] . inv'3 x  -> invariant'3 x
  
  predicate invariant'2 (self : borrowed (Vec'0.t_Vec t (Global'0.t_Global))) =
    [%#span7] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'2 (_1 : borrowed (Vec'0.t_Vec t (Global'0.t_Global)))
  
  axiom inv'2 [@rewrite] : forall x : borrowed (Vec'0.t_Vec t (Global'0.t_Global)) [inv'2 x] . inv'2 x = invariant'2 x
  
  predicate invariant'1 (self : borrowed t) =
    [%#span7] inv'3 self.current /\ inv'3 self.final
  
  predicate inv'1 (_1 : borrowed t)
  
  axiom inv'1 [@rewrite] : forall x : borrowed t [inv'1 x] . inv'1 x = invariant'1 x
  
  use prelude.prelude.UIntSize
  
  constant v_MAX'0 : usize = [%#span8] (18446744073709551615 : usize)
  
  function shallow_model'1 (self : Vec'0.t_Vec t (Global'0.t_Global)) : Seq.seq t
  
  axiom shallow_model'1_spec : forall self : Vec'0.t_Vec t (Global'0.t_Global) . [%#span9] Seq.length (shallow_model'1 self)
  <= UIntSize.to_int (v_MAX'0 : usize)
  
  predicate invariant'0 (self : Vec'0.t_Vec t (Global'0.t_Global)) =
    [%#span10] inv'7 (shallow_model'1 self)
  
  axiom inv'0 [@rewrite] : forall x : Vec'0.t_Vec t (Global'0.t_Global) [inv'0 x] . inv'0 x = invariant'0 x
  
  function shallow_model'0 (self : borrowed (Vec'0.t_Vec t (Global'0.t_Global))) : Seq.seq t =
    [%#span11] shallow_model'1 self.current
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'3 (self : borrowed (Vec'0.t_Vec t (Global'0.t_Global))) =
    [%#span12] self.final = self.current
  
  predicate resolve'1 (_1 : borrowed (Vec'0.t_Vec t (Global'0.t_Global))) =
    resolve'3 _1
  
  type t_DeepModelTy'0
  
  function deep_model'1 (self : t) : t_DeepModelTy'0
  
  function deep_model'0 (self : t) : t_DeepModelTy'0 =
    [%#span13] deep_model'1 self
  
  let rec eq'0 (self:t) (other:t) (return'  (ret:bool))= {[@expl:precondition] [%#span15] inv'6 other}
    {[@expl:precondition] [%#span14] inv'6 self}
    any [ return' (result:bool)-> {[%#span16] result = (deep_model'0 self = deep_model'0 other)} (! return' {result}) ] 
  
  use prelude.prelude.Slice
  
  use seq.Seq
  
  predicate has_value'0 [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t) =
    [%#span17] Seq.get seq (UIntSize.to_int self) = out
  
  predicate in_bounds'0 [@inline:trivial] (self : usize) (seq : Seq.seq t) =
    [%#span18] UIntSize.to_int self < Seq.length seq
  
  function shallow_model'2 (self : Vec'0.t_Vec t (Global'0.t_Global)) : Seq.seq t =
    [%#span19] shallow_model'1 self
  
  let rec index'0 (self:Vec'0.t_Vec t (Global'0.t_Global)) (index:usize) (return'  (ret:t))= {[@expl:precondition] [%#span22] inv'4 index}
    {[@expl:precondition] [%#span21] inv'5 self}
    {[@expl:precondition] [%#span20] in_bounds'0 index (shallow_model'2 self)}
    any
    [ return' (result:t)-> {[%#span24] inv'6 result}
      {[%#span23] has_value'0 index (shallow_model'2 self) result}
      (! return' {result}) ]
    
  
  predicate resolve'2 (self : borrowed t) =
    [%#span12] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed t) =
    resolve'2 _1
  
  predicate resolve_elswhere'0 [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t) =
    [%#span25] forall i : int . 0 <= i /\ i <> UIntSize.to_int self /\ i < Seq.length old'
     -> Seq.get old' i = Seq.get fin i
  
  let rec index_mut'0 (self:borrowed (Vec'0.t_Vec t (Global'0.t_Global))) (index:usize) (return'  (ret:borrowed t))= {[@expl:precondition] [%#span28] inv'4 index}
    {[@expl:precondition] [%#span27] inv'2 self}
    {[@expl:precondition] [%#span26] in_bounds'0 index (shallow_model'0 self)}
    any
    [ return' (result:borrowed t)-> {[%#span33] inv'1 result}
      {[%#span32] Seq.length (shallow_model'1 self.final) = Seq.length (shallow_model'0 self)}
      {[%#span31] resolve_elswhere'0 index (shallow_model'0 self) (shallow_model'1 self.final)}
      {[%#span30] has_value'0 index (shallow_model'1 self.final) result.final}
      {[%#span29] has_value'0 index (shallow_model'0 self) result.current}
      (! return' {result}) ]
    
  
  meta "compute_max_steps" 1000000
  
  let rec read_write (a:borrowed (Vec'0.t_Vec t (Global'0.t_Global))) (i:usize) (x:t) (return'  (ret:()))= {[%#s07_read_write3] inv'3 x}
    {[%#s07_read_write2] inv'2 a}
    {[%#s07_read_write1] UIntSize.to_int i < Seq.length (shallow_model'0 a)}
    (! bb0
    [ bb0 = s0
      [ s0 = {inv'0 a.current}
        Borrow.borrow_final <Vec'0.t_Vec t (Global'0.t_Global)> {a.current} {Borrow.get_id a}
          (fun (_ret':borrowed (Vec'0.t_Vec t (Global'0.t_Global))) ->
             [ &_7 <- _ret' ] 
            -{inv'0 _ret'.final}-
             [ &a <- { a with current = _ret'.final ; } ] 
            s1)
      | s1 = index_mut'0 {_7} {i} (fun (_ret':borrowed t) ->  [ &_6 <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = s0
      [ s0 =  [ &_6 <- { _6 with current = x ; } ] s1
      | s1 = {[@expl:type invariant] inv'1 _6} s2
      | s2 = -{resolve'0 _6}- s3
      | s3 = index'0 {a.current} {i} (fun (_ret':t) ->  [ &_12 <- _ret' ] s4)
      | s4 = bb2 ]
      
    | bb2 = s0 [ s0 = eq'0 {_12} {x} (fun (_ret':bool) ->  [ &_10 <- _ret' ] s1) | s1 = bb3 ] 
    | bb3 = s0
      [ s0 = {[@expl:type invariant] inv'2 a} s1
      | s1 = -{resolve'1 a}- s2
      | s2 = any [ br0 -> {_10 = false} (! bb5) | br1 -> {_10} (! bb4) ]  ]
      
    | bb4 = return' {_0}
    | bb5 = {[%#s07_read_write0] false} any ]
    )
    [ & _0 : () = any_l ()
    | & a : borrowed (Vec'0.t_Vec t (Global'0.t_Global)) = a
    | & i : usize = i
    | & x : t = x
    | & _6 : borrowed t = any_l ()
    | & _7 : borrowed (Vec'0.t_Vec t (Global'0.t_Global)) = any_l ()
    | & _10 : bool = any_l ()
    | & _12 : t = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
