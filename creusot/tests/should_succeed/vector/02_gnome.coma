
module T_core__cmp__Ordering
  type t_Ordering  =
    | C_Less
    | C_Equal
    | C_Greater
  
  function any_l (_ : 'b) : 'a
  
  let rec v_Less (input:t_Ordering) (ret  )= any
    [ good -> {C_Less  = input} (! ret) | bad -> {C_Less  <> input} (! {false} any) ]
    
  
  let rec v_Equal (input:t_Ordering) (ret  )= any
    [ good -> {C_Equal  = input} (! ret) | bad -> {C_Equal  <> input} (! {false} any) ]
    
  
  let rec v_Greater (input:t_Ordering) (ret  )= any
    [ good -> {C_Greater  = input} (! ret) | bad -> {C_Greater  <> input} (! {false} any) ]
    
end
module T_core__ptr__non_null__NonNull
  use prelude.prelude.Opaque
  
  type t_NonNull 't =
    | C_NonNull opaque_ptr
  
  function any_l (_ : 'b) : 'a
  
  let rec t_NonNull < 't > (input:t_NonNull 't) (ret  (pointer:opaque_ptr))= any
    [ good (pointer:opaque_ptr)-> {C_NonNull pointer = input} (! ret {pointer}) ]
    
end
module T_core__marker__PhantomData
  type t_PhantomData 't =
    | C_PhantomData
  
  function any_l (_ : 'b) : 'a
  
  let rec t_PhantomData < 't > (input:t_PhantomData 't) (ret  )= any [ good -> {C_PhantomData  = input} (! ret) ] 
end
module T_core__ptr__unique__Unique
  use T_core__marker__PhantomData as PhantomData'0
  
  use T_core__ptr__non_null__NonNull as NonNull'0
  
  type t_Unique 't =
    | C_Unique (NonNull'0.t_NonNull 't) (PhantomData'0.t_PhantomData 't)
  
  function any_l (_ : 'b) : 'a
  
  let rec t_Unique < 't > (input:t_Unique 't) (ret  (pointer:NonNull'0.t_NonNull 't) (_marker:PhantomData'0.t_PhantomData 't))= any
    [ good (pointer:NonNull'0.t_NonNull 't) (_marker:PhantomData'0.t_PhantomData 't)-> {C_Unique pointer _marker
      = input}
      (! ret {pointer} {_marker}) ]
    
end
module T_alloc__raw_vec__Cap
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  type t_Cap  =
    | C_Cap usize
  
  function any_l (_ : 'b) : 'a
  
  let rec t_Cap (input:t_Cap) (ret  (field_0:usize))= any
    [ good (field_0:usize)-> {C_Cap field_0 = input} (! ret {field_0}) ]
    
end
module T_alloc__raw_vec__RawVec
  use T_alloc__raw_vec__Cap as Cap'0
  
  use T_core__ptr__unique__Unique as Unique'0
  
  type t_RawVec 't 'a =
    | C_RawVec (Unique'0.t_Unique 't) (Cap'0.t_Cap) 'a
  
  function any_l (_ : 'b) : 'a
  
  let rec t_RawVec < 't > < 'a > (input:t_RawVec 't 'a) (ret  (ptr:Unique'0.t_Unique 't) (cap:Cap'0.t_Cap) (alloc:'a))= any
    [ good (ptr:Unique'0.t_Unique 't) (cap:Cap'0.t_Cap) (alloc:'a)-> {C_RawVec ptr cap alloc = input}
      (! ret {ptr} {cap} {alloc}) ]
    
end
module T_alloc__vec__Vec
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use T_alloc__raw_vec__RawVec as RawVec'0
  
  type t_Vec 't 'a =
    | C_Vec (RawVec'0.t_RawVec 't 'a) usize
  
  function any_l (_ : 'b) : 'a
  
  let rec t_Vec < 't > < 'a > (input:t_Vec 't 'a) (ret  (buf:RawVec'0.t_RawVec 't 'a) (len:usize))= any
    [ good (buf:RawVec'0.t_RawVec 't 'a) (len:usize)-> {C_Vec buf len = input} (! ret {buf} {len}) ]
    
end
module T_alloc__alloc__Global
  type t_Global  =
    | C_Global
  
  function any_l (_ : 'b) : 'a
  
  let rec t_Global (input:t_Global) (ret  )= any [ good -> {C_Global  = input} (! ret) ] 
end
module M_02_gnome__gnome_sort [#"../02_gnome.rs" 22 0 24 29]
  type t
  
  let%span s02_gnome0 = "../02_gnome.rs" 26 16 26 31
  let%span s02_gnome1 = "../02_gnome.rs" 27 16 27 17
  let%span s02_gnome2 = "../02_gnome.rs" 28 16 28 51
  let%span s02_gnome3 = "../02_gnome.rs" 28 4 28 53
  let%span s02_gnome4 = "../02_gnome.rs" 31 16 31 17
  let%span s02_gnome5 = "../02_gnome.rs" 31 27 31 28
  let%span s02_gnome6 = "../02_gnome.rs" 32 17 32 18
  let%span s02_gnome7 = "../02_gnome.rs" 34 23 34 24
  let%span s02_gnome8 = "../02_gnome.rs" 35 17 35 18
  let%span s02_gnome9 = "../02_gnome.rs" 22 38 22 39
  let%span s02_gnome10 = "../02_gnome.rs" 20 10 20 35
  let%span s02_gnome11 = "../02_gnome.rs" 21 0 21 36
  let%span span12 = "../../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  let%span span13 = "../../../../../creusot-contracts/src/logic/seq.rs" 198 8 198 97
  let%span span14 = "../../../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  let%span span15 = "../../../../../creusot-contracts/src/logic/ord.rs" 69 14 69 59
  let%span span16 = "../../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48
  let%span span17 = "../../../../../creusot-contracts/src/logic/ord.rs" 65 14 65 44
  let%span span18 = "../../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45
  let%span span19 = "../../../../../creusot-contracts/src/logic/ord.rs" 60 14 60 47
  let%span span20 = "../../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32
  let%span span21 = "../../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32
  let%span span22 = "../../../../../creusot-contracts/src/logic/ord.rs" 55 14 55 31
  let%span span23 = "../../../../../creusot-contracts/src/logic/ord.rs" 49 14 49 45
  let%span span24 = "../../../../../creusot-contracts/src/logic/ord.rs" 45 14 45 64
  let%span span25 = "../../../../../creusot-contracts/src/logic/ord.rs" 35 14 35 61
  let%span span26 = "../../../../../creusot-contracts/src/logic/ord.rs" 25 14 25 61
  let%span span27 = "../../../../../creusot-contracts/src/logic/ord.rs" 15 14 15 64
  let%span span28 = "../../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span span29 = "" 0 0 0 0
  let%span span30 = "../../../../../creusot-contracts/src/std/slice.rs" 29 14 29 41
  let%span span31 = "../../../../../creusot-contracts/src/std/slice.rs" 30 14 30 42
  let%span span32 = "../../../../../creusot-contracts/src/std/slice.rs" 18 20 18 30
  let%span span33 = "../../../../../creusot-contracts/src/std/vec.rs" 19 14 19 41
  let%span span34 = "../../../../../creusot-contracts/src/std/vec.rs" 68 20 68 41
  let%span span35 = "../02_gnome.rs" 10 4 12 5
  let%span span36 = "../02_gnome.rs" 17 4 17 31
  let%span span37 = "../../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31
  let%span span38 = "../../../../../creusot-contracts/src/std/vec.rs" 31 14 31 56
  let%span span39 = "../../../../../creusot-contracts/src/std/vec.rs" 32 4 33 53
  let%span span40 = "../../../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  let%span span41 = "../../../../../creusot-contracts/src/model.rs" 108 8 108 31
  let%span span42 = "../../../../../creusot-contracts/src/std/slice.rs" 261 19 261 35
  let%span span43 = "../../../../../creusot-contracts/src/std/slice.rs" 262 19 262 35
  let%span span44 = "" 0 0 0 0
  let%span span45 = "../../../../../creusot-contracts/src/std/slice.rs" 263 8 263 52
  let%span span46 = "" 0 0 0 0
  let%span span47 = "../../../../../creusot-contracts/src/std/vec.rs" 178 26 178 42
  let%span span48 = "../../../../../creusot-contracts/src/std/vec.rs" 179 26 179 48
  let%span span49 = "" 0 0 0 0
  let%span span50 = "../../../../../creusot-contracts/src/model.rs" 81 8 81 28
  let%span span51 = "" 0 0 0 0
  let%span span52 = "" 0 0 0 0
  let%span span53 = "../../../../../creusot-contracts/src/std/cmp.rs" 36 26 36 77
  let%span span54 = "../../../../../creusot-contracts/src/std/slice.rs" 133 20 133 37
  let%span span55 = "../../../../../creusot-contracts/src/std/slice.rs" 126 20 126 37
  let%span span56 = "../../../../../creusot-contracts/src/model.rs" 90 8 90 31
  let%span span57 = "../../../../../creusot-contracts/src/std/vec.rs" 165 27 165 46
  let%span span58 = "" 0 0 0 0
  let%span span59 = "" 0 0 0 0
  let%span span60 = "../../../../../creusot-contracts/src/std/vec.rs" 166 26 166 54
  let%span span61 = "" 0 0 0 0
  let%span span62 = "" 0 0 0 0
  let%span span63 = "../../../../../creusot-contracts/src/std/vec.rs" 86 26 86 48
  let%span span64 = "../../../../../creusot-contracts/src/logic/seq.rs" 120 8 120 37
  let%span span65 = "../../../../../creusot-contracts/src/snapshot.rs" 27 20 27 48
  let%span span66 = "../../../../../creusot-contracts/src/model.rs" 99 8 99 28
  
  predicate inv'8 (_1 : t)
  
  use T_alloc__alloc__Global as Global'0
  
  predicate invariant'9 (self : t) =
    [%#span12] inv'8 self
  
  predicate inv'9 (_1 : t)
  
  axiom inv'9 [@rewrite] : forall x : t [inv'9 x] . inv'9 x = invariant'9 x
  
  predicate invariant'8 (self : t)
  
  axiom inv'8 : forall x : t [inv'8 x] . inv'8 x  -> invariant'8 x
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  predicate invariant'7 (self : Seq.seq t) =
    [%#span13] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'9 (Seq.get self i)
  
  predicate inv'7 (_1 : Seq.seq t)
  
  axiom inv'7 [@rewrite] : forall x : Seq.seq t [inv'7 x] . inv'7 x = invariant'7 x
  
  use prelude.prelude.Borrow
  
  predicate invariant'6 (self : t) =
    [%#span14] inv'8 self
  
  predicate inv'6 (_1 : t)
  
  axiom inv'6 [@rewrite] : forall x : t [inv'6 x] . inv'6 x = invariant'6 x
  
  use prelude.prelude.UIntSize
  
  predicate inv'5 (_1 : usize)
  
  axiom inv'5 [@rewrite] : forall x : usize [inv'5 x] . inv'5 x = true
  
  use T_alloc__vec__Vec as Vec'0
  
  predicate inv'0 (_1 : Vec'0.t_Vec t (Global'0.t_Global))
  
  predicate invariant'4 (self : Vec'0.t_Vec t (Global'0.t_Global)) =
    [%#span14] inv'0 self
  
  predicate inv'4 (_1 : Vec'0.t_Vec t (Global'0.t_Global))
  
  axiom inv'4 [@rewrite] : forall x : Vec'0.t_Vec t (Global'0.t_Global) [inv'4 x] . inv'4 x = invariant'4 x
  
  use T_core__cmp__Ordering as Ordering'0
  
  type t_DeepModelTy'0
  
  function cmp_log'0 (self : t_DeepModelTy'0) (_2 : t_DeepModelTy'0) : Ordering'0.t_Ordering
  
  function eq_cmp'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom eq_cmp'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span15] (x = y)
  = (cmp_log'0 x y = Ordering'0.C_Equal)
  
  function antisym2'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom antisym2'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . ([%#span16] cmp_log'0 x y
  = Ordering'0.C_Greater)  -> ([%#span17] cmp_log'0 y x = Ordering'0.C_Less)
  
  function antisym1'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom antisym1'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . ([%#span18] cmp_log'0 x y
  = Ordering'0.C_Less)  -> ([%#span19] cmp_log'0 y x = Ordering'0.C_Greater)
  
  function trans'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) (z : t_DeepModelTy'0) (o : Ordering'0.t_Ordering) : ()
  
  axiom trans'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0, z : t_DeepModelTy'0, o : Ordering'0.t_Ordering . ([%#span20] cmp_log'0 x y
  = o)  -> ([%#span21] cmp_log'0 y z = o)  -> ([%#span22] cmp_log'0 x z = o)
  
  function refl'0 (x : t_DeepModelTy'0) : ()
  
  axiom refl'0_spec : forall x : t_DeepModelTy'0 . [%#span23] cmp_log'0 x x = Ordering'0.C_Equal
  
  function gt_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function cmp_gt_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_gt_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span24] gt_log'0 x y
  = (cmp_log'0 x y = Ordering'0.C_Greater)
  
  function ge_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function cmp_ge_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_ge_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span25] ge_log'0 x y
  = (cmp_log'0 x y <> Ordering'0.C_Less)
  
  function lt_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function cmp_lt_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_lt_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span26] lt_log'0 x y
  = (cmp_log'0 x y = Ordering'0.C_Less)
  
  function le_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function cmp_le_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_le_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span27] le_log'0 x y
  = (cmp_log'0 x y <> Ordering'0.C_Greater)
  
  predicate invariant'3 (self : borrowed (Vec'0.t_Vec t (Global'0.t_Global))) =
    [%#span28] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'3 (_1 : borrowed (Vec'0.t_Vec t (Global'0.t_Global)))
  
  axiom inv'3 [@rewrite] : forall x : borrowed (Vec'0.t_Vec t (Global'0.t_Global)) [inv'3 x] . inv'3 x = invariant'3 x
  
  use prelude.prelude.Slice
  
  predicate inv'1 (_1 : slice t)
  
  predicate invariant'2 (self : borrowed (slice t)) =
    [%#span28] inv'1 self.current /\ inv'1 self.final
  
  predicate inv'2 (_1 : borrowed (slice t))
  
  axiom inv'2 [@rewrite] : forall x : borrowed (slice t) [inv'2 x] . inv'2 x = invariant'2 x
  
  use prelude.prelude.Slice
  
  use prelude.prelude.UIntSize
  
  constant v_MAX'0 : usize = [%#span29] (18446744073709551615 : usize)
  
  function shallow_model'6 (self : slice t) : Seq.seq t
  
  axiom shallow_model'6_spec : forall self : slice t . ([%#span31] shallow_model'6 self = Slice.id self)
  && ([%#span30] Seq.length (shallow_model'6 self) <= UIntSize.to_int (v_MAX'0 : usize))
  
  predicate invariant'1 (self : slice t) =
    [%#span32] inv'7 (shallow_model'6 self)
  
  axiom inv'1 [@rewrite] : forall x : slice t [inv'1 x] . inv'1 x = invariant'1 x
  
  function shallow_model'2 (self : Vec'0.t_Vec t (Global'0.t_Global)) : Seq.seq t
  
  axiom shallow_model'2_spec : forall self : Vec'0.t_Vec t (Global'0.t_Global) . [%#span33] Seq.length (shallow_model'2 self)
  <= UIntSize.to_int (v_MAX'0 : usize)
  
  predicate invariant'0 (self : Vec'0.t_Vec t (Global'0.t_Global)) =
    [%#span34] inv'7 (shallow_model'2 self)
  
  axiom inv'0 [@rewrite] : forall x : Vec'0.t_Vec t (Global'0.t_Global) [inv'0 x] . inv'0 x = invariant'0 x
  
  use seq.Seq
  
  predicate sorted_range'0 [#"../02_gnome.rs" 9 0 9 63] (s : Seq.seq t_DeepModelTy'0) (l : int) (u : int) =
    [%#span35] forall i : int, j : int . l <= i /\ i < j /\ j < u  -> le_log'0 (Seq.get s i) (Seq.get s j)
  
  use seq.Seq
  
  predicate sorted'0 [#"../02_gnome.rs" 16 0 16 41] (s : Seq.seq t_DeepModelTy'0) =
    [%#span36] sorted_range'0 s 0 (Seq.length s)
  
  function deep_model'3 (self : t) : t_DeepModelTy'0
  
  use seq.Seq
  
  function index_logic'0 [@inline:trivial] (self : Vec'0.t_Vec t (Global'0.t_Global)) (ix : int) : t =
    [%#span37] Seq.get (shallow_model'2 self) ix
  
  function deep_model'1 (self : Vec'0.t_Vec t (Global'0.t_Global)) : Seq.seq t_DeepModelTy'0
  
  axiom deep_model'1_spec : forall self : Vec'0.t_Vec t (Global'0.t_Global) . ([%#span39] forall i : int . 0 <= i
  /\ i < Seq.length (shallow_model'2 self)  -> Seq.get (deep_model'1 self) i = deep_model'3 (index_logic'0 self i))
  && ([%#span38] Seq.length (shallow_model'2 self) = Seq.length (deep_model'1 self))
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'3 (self : borrowed (Vec'0.t_Vec t (Global'0.t_Global))) =
    [%#span40] self.final = self.current
  
  predicate resolve'1 (_1 : borrowed (Vec'0.t_Vec t (Global'0.t_Global))) =
    resolve'3 _1
  
  predicate resolve'2 (self : borrowed (slice t)) =
    [%#span40] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed (slice t)) =
    resolve'2 _1
  
  use seq.Permut
  
  function shallow_model'5 (self : borrowed (slice t)) : Seq.seq t =
    [%#span41] shallow_model'6 self.current
  
  let rec swap'0 (self:borrowed (slice t)) (a:usize) (b:usize) (return'  (ret:()))= {[@expl:precondition] [%#span44] inv'2 self}
    {[@expl:precondition] [%#span43] UIntSize.to_int b < Seq.length (shallow_model'5 self)}
    {[@expl:precondition] [%#span42] UIntSize.to_int a < Seq.length (shallow_model'5 self)}
    any
    [ return' (result:())-> {[%#span45] Permut.exchange (shallow_model'6 self.final) (shallow_model'5 self) (UIntSize.to_int a) (UIntSize.to_int b)}
      (! return' {result}) ]
    
  
  function shallow_model'0 (self : borrowed (Vec'0.t_Vec t (Global'0.t_Global))) : Seq.seq t =
    [%#span41] shallow_model'2 self.current
  
  let rec deref_mut'0 (self:borrowed (Vec'0.t_Vec t (Global'0.t_Global))) (return'  (ret:borrowed (slice t)))= {[@expl:precondition] [%#span46] inv'3 self}
    any
    [ return' (result:borrowed (slice t))-> {[%#span49] inv'2 result}
      {[%#span48] shallow_model'6 result.final = shallow_model'2 self.final}
      {[%#span47] shallow_model'5 result = shallow_model'0 self}
      (! return' {result}) ]
    
  
  function deep_model'2 (self : t) : t_DeepModelTy'0 =
    [%#span50] deep_model'3 self
  
  let rec le'0 (self:t) (other:t) (return'  (ret:bool))= {[@expl:precondition] [%#span52] inv'6 other}
    {[@expl:precondition] [%#span51] inv'6 self}
    any
    [ return' (result:bool)-> {[%#span53] result = le_log'0 (deep_model'2 self) (deep_model'2 other)}
      (! return' {result}) ]
    
  
  predicate has_value'0 [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t) =
    [%#span54] Seq.get seq (UIntSize.to_int self) = out
  
  predicate in_bounds'0 [@inline:trivial] (self : usize) (seq : Seq.seq t) =
    [%#span55] UIntSize.to_int self < Seq.length seq
  
  function shallow_model'4 (self : Vec'0.t_Vec t (Global'0.t_Global)) : Seq.seq t =
    [%#span56] shallow_model'2 self
  
  let rec index'0 (self:Vec'0.t_Vec t (Global'0.t_Global)) (index:usize) (return'  (ret:t))= {[@expl:precondition] [%#span59] inv'5 index}
    {[@expl:precondition] [%#span58] inv'4 self}
    {[@expl:precondition] [%#span57] in_bounds'0 index (shallow_model'4 self)}
    any
    [ return' (result:t)-> {[%#span61] inv'6 result}
      {[%#span60] has_value'0 index (shallow_model'4 self) result}
      (! return' {result}) ]
    
  
  let rec len'0 (self:Vec'0.t_Vec t (Global'0.t_Global)) (return'  (ret:usize))= {[@expl:precondition] [%#span62] inv'4 self}
    any
    [ return' (result:usize)-> {[%#span63] UIntSize.to_int result = Seq.length (shallow_model'4 self)}
      (! return' {result}) ]
    
  
  use prelude.prelude.Snapshot
  
  use seq.Permut
  
  predicate permutation_of'0 (self : Seq.seq t) (o : Seq.seq t) =
    [%#span64] Permut.permut self o 0 (Seq.length self)
  
  function shallow_model'3 (self : borrowed (Vec'0.t_Vec t (Global'0.t_Global))) : Seq.seq t =
    [%#span56] shallow_model'0 self
  
  function shallow_model'1 (self : Snapshot.snap_ty (borrowed (Vec'0.t_Vec t (Global'0.t_Global)))) : Seq.seq t =
    [%#span65] shallow_model'3 (Snapshot.inner self)
  
  function deep_model'0 (self : borrowed (Vec'0.t_Vec t (Global'0.t_Global))) : Seq.seq t_DeepModelTy'0 =
    [%#span66] deep_model'1 self.current
  
  use prelude.prelude.Snapshot
  
  meta "compute_max_steps" 1000000
  
  let rec gnome_sort (v:borrowed (Vec'0.t_Vec t (Global'0.t_Global))) (return'  (ret:()))= {[%#s02_gnome9] inv'3 v}
    (! bb0
    [ bb0 = s0 [ s0 =  [ &old_v <- [%#s02_gnome0] Snapshot.new v ] s1 | s1 = bb1 ] 
    | bb1 = s0 [ s0 =  [ &i <- [%#s02_gnome1] (0 : usize) ] s1 | s1 =  [ &old_2_0 <- Snapshot.new v ] s2 | s2 = bb2 ] 
    | bb2 = bb2
      [ bb2 = {[@expl:loop invariant] (Snapshot.inner old_2_0).final = v.final}
        {[@expl:loop invariant] [%#s02_gnome3] permutation_of'0 (shallow_model'0 v) (shallow_model'1 old_v)}
        {[@expl:loop invariant] [%#s02_gnome2] sorted_range'0 (deep_model'0 v) 0 (UIntSize.to_int i)}
        (! s0) [ s0 = bb3 ] 
        [ bb3 = s0 [ s0 = len'0 {v.current} (fun (_ret':usize) ->  [ &_12 <- _ret' ] s1) | s1 = bb4 ] 
        | bb4 = s0
          [ s0 = UIntSize.lt {i} {_12} (fun (_ret':bool) ->  [ &_10 <- _ret' ] s1)
          | s1 = any [ br0 -> {_10 = false} (! bb17) | br1 -> {_10} (! bb5) ]  ]
          
        | bb5 = s0
          [ s0 = UIntSize.eq {i} {[%#s02_gnome4] (0 : usize)} (fun (_ret':bool) ->  [ &_14 <- _ret' ] s1)
          | s1 = any [ br0 -> {_14 = false} (! bb7) | br1 -> {_14} (! bb6) ]  ]
          
        | bb6 = bb12
        | bb7 = s0
          [ s0 = UIntSize.sub {i} {[%#s02_gnome5] (1 : usize)} (fun (_ret':usize) ->  [ &_20 <- _ret' ] s1)
          | s1 = index'0 {v.current} {_20} (fun (_ret':t) ->  [ &_18 <- _ret' ] s2)
          | s2 = bb8 ]
          
        | bb8 = s0 [ s0 = index'0 {v.current} {i} (fun (_ret':t) ->  [ &_24 <- _ret' ] s1) | s1 = bb9 ] 
        | bb9 = s0
          [ s0 =  [ &_23 <- _24 ] s1 | s1 = le'0 {_18} {_23} (fun (_ret':bool) ->  [ &_16 <- _ret' ] s2) | s2 = bb10 ]
          
        | bb10 = any [ br0 -> {_16 = false} (! bb13) | br1 -> {_16} (! bb11) ] 
        | bb11 = bb12
        | bb12 = s0
          [ s0 = UIntSize.add {i} {[%#s02_gnome6] (1 : usize)} (fun (_ret':usize) ->  [ &i <- _ret' ] s1) | s1 = bb16 ]
          
        | bb13 = s0
          [ s0 = {inv'0 v.current}
            Borrow.borrow_mut <Vec'0.t_Vec t (Global'0.t_Global)> {v.current}
              (fun (_ret':borrowed (Vec'0.t_Vec t (Global'0.t_Global))) ->
                 [ &_30 <- _ret' ] 
                -{inv'0 _ret'.final}-
                 [ &v <- { v with current = _ret'.final ; } ] 
                s1)
          | s1 = deref_mut'0 {_30} (fun (_ret':borrowed (slice t)) ->  [ &_29 <- _ret' ] s2)
          | s2 = bb14 ]
          
        | bb14 = s0
          [ s0 = {inv'1 _29.current}
            Borrow.borrow_final <slice t> {_29.current} {Borrow.get_id _29}
              (fun (_ret':borrowed (slice t)) ->
                 [ &_28 <- _ret' ] 
                -{inv'1 _ret'.final}-
                 [ &_29 <- { _29 with current = _ret'.final ; } ] 
                s1)
          | s1 = UIntSize.sub {i} {[%#s02_gnome7] (1 : usize)} (fun (_ret':usize) ->  [ &_31 <- _ret' ] s2)
          | s2 = swap'0 {_28} {_31} {i} (fun (_ret':()) ->  [ &_27 <- _ret' ] s3)
          | s3 = bb15 ]
          
        | bb15 = s0
          [ s0 = {[@expl:type invariant] inv'2 _29} s1
          | s1 = -{resolve'0 _29}- s2
          | s2 = UIntSize.sub {i} {[%#s02_gnome8] (1 : usize)} (fun (_ret':usize) ->  [ &i <- _ret' ] s3)
          | s3 = bb16 ]
          
        | bb16 = bb2 ]
         ]
      
    | bb17 = s0 [ s0 = {[@expl:type invariant] inv'3 v} s1 | s1 = -{resolve'1 v}- s2 | s2 = return' {_0} ]  ]
    )
    [ & _0 : () = any_l ()
    | & v : borrowed (Vec'0.t_Vec t (Global'0.t_Global)) = v
    | & old_v : Snapshot.snap_ty (borrowed (Vec'0.t_Vec t (Global'0.t_Global))) = any_l ()
    | & i : usize = any_l ()
    | & _10 : bool = any_l ()
    | & _12 : usize = any_l ()
    | & _14 : bool = any_l ()
    | & _16 : bool = any_l ()
    | & _18 : t = any_l ()
    | & _20 : usize = any_l ()
    | & _23 : t = any_l ()
    | & _24 : t = any_l ()
    | & _27 : () = any_l ()
    | & _28 : borrowed (slice t) = any_l ()
    | & _29 : borrowed (slice t) = any_l ()
    | & _30 : borrowed (Vec'0.t_Vec t (Global'0.t_Global)) = any_l ()
    | & _31 : usize = any_l ()
    | & old_2_0 : Snapshot.snap_ty (borrowed (Vec'0.t_Vec t (Global'0.t_Global))) = any_l () ]
    
    [ return' (result:())-> {[@expl:postcondition] [%#s02_gnome11] permutation_of'0 (shallow_model'2 v.final) (shallow_model'0 v)}
      {[@expl:postcondition] [%#s02_gnome10] sorted'0 (deep_model'1 v.final)}
      (! return' {result}) ]
    
end
