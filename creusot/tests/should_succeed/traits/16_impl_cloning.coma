
module T_core__ptr__non_null__NonNull
  use prelude.prelude.Opaque
  
  type t_NonNull 't =
    | C_NonNull opaque_ptr
  
  function any_l (_ : 'b) : 'a
  
  let rec t_NonNull < 't > (input:t_NonNull 't) (ret  (pointer:opaque_ptr))= any
    [ good (pointer:opaque_ptr)-> {C_NonNull pointer = input} (! ret {pointer}) ]
    
end
module T_core__marker__PhantomData
  type t_PhantomData 't =
    | C_PhantomData
  
  function any_l (_ : 'b) : 'a
  
  let rec t_PhantomData < 't > (input:t_PhantomData 't) (ret  )= any [ good -> {C_PhantomData  = input} (! ret) ] 
end
module T_core__ptr__unique__Unique
  use T_core__marker__PhantomData as PhantomData'0
  
  use T_core__ptr__non_null__NonNull as NonNull'0
  
  type t_Unique 't =
    | C_Unique (NonNull'0.t_NonNull 't) (PhantomData'0.t_PhantomData 't)
  
  function any_l (_ : 'b) : 'a
  
  let rec t_Unique < 't > (input:t_Unique 't) (ret  (pointer:NonNull'0.t_NonNull 't) (_marker:PhantomData'0.t_PhantomData 't))= any
    [ good (pointer:NonNull'0.t_NonNull 't) (_marker:PhantomData'0.t_PhantomData 't)-> {C_Unique pointer _marker
      = input}
      (! ret {pointer} {_marker}) ]
    
end
module T_alloc__raw_vec__Cap
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  type t_Cap  =
    | C_Cap usize
  
  function any_l (_ : 'b) : 'a
  
  let rec t_Cap (input:t_Cap) (ret  (field_0:usize))= any
    [ good (field_0:usize)-> {C_Cap field_0 = input} (! ret {field_0}) ]
    
end
module T_alloc__raw_vec__RawVec
  use T_alloc__raw_vec__Cap as Cap'0
  
  use T_core__ptr__unique__Unique as Unique'0
  
  type t_RawVec 't 'a =
    | C_RawVec (Unique'0.t_Unique 't) (Cap'0.t_Cap) 'a
  
  function any_l (_ : 'b) : 'a
  
  let rec t_RawVec < 't > < 'a > (input:t_RawVec 't 'a) (ret  (ptr:Unique'0.t_Unique 't) (cap:Cap'0.t_Cap) (alloc:'a))= any
    [ good (ptr:Unique'0.t_Unique 't) (cap:Cap'0.t_Cap) (alloc:'a)-> {C_RawVec ptr cap alloc = input}
      (! ret {ptr} {cap} {alloc}) ]
    
end
module T_alloc__vec__Vec
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use T_alloc__raw_vec__RawVec as RawVec'0
  
  type t_Vec 't 'a =
    | C_Vec (RawVec'0.t_RawVec 't 'a) usize
  
  function any_l (_ : 'b) : 'a
  
  let rec t_Vec < 't > < 'a > (input:t_Vec 't 'a) (ret  (buf:RawVec'0.t_RawVec 't 'a) (len:usize))= any
    [ good (buf:RawVec'0.t_RawVec 't 'a) (len:usize)-> {C_Vec buf len = input} (! ret {buf} {len}) ]
    
end
module T_alloc__alloc__Global
  type t_Global  =
    | C_Global
  
  function any_l (_ : 'b) : 'a
  
  let rec t_Global (input:t_Global) (ret  )= any [ good -> {C_Global  = input} (! ret) ] 
end
module T_16_impl_cloning__Vec [#"../16_impl_cloning.rs" 5 0 5 17]
  use T_alloc__alloc__Global as Global'0
  
  use T_alloc__vec__Vec as Vec'0
  
  type t_Vec 't =
    | C_Vec (Vec'0.t_Vec 't (Global'0.t_Global))
  
  function any_l (_ : 'b) : 'a
  
  let rec t_Vec < 't > (input:t_Vec 't) (ret  (field_0:Vec'0.t_Vec 't (Global'0.t_Global)))= any
    [ good (field_0:Vec'0.t_Vec 't (Global'0.t_Global))-> {C_Vec field_0 = input} (! ret {field_0}) ]
    
end
module M_16_impl_cloning__test [#"../16_impl_cloning.rs" 17 0 17 30]
  type t
  
  let%span s16_impl_cloning0 = "../16_impl_cloning.rs" 17 15 17 16
  let%span s16_impl_cloning1 = "../16_impl_cloning.rs" 16 10 16 21
  let%span span2 = "../../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  let%span span3 = "../../../../../creusot-contracts/src/logic/seq.rs" 198 8 198 97
  let%span span4 = "" 0 0 0 0
  let%span span5 = "../../../../../creusot-contracts/src/std/vec.rs" 19 14 19 41
  let%span span6 = "../../../../../creusot-contracts/src/std/vec.rs" 68 20 68 41
  let%span span7 = "../../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span span8 = "../16_impl_cloning.rs" 12 8 12 14
  let%span span9 = "../../../../../creusot-contracts/src/model.rs" 108 8 108 31
  let%span span10 = "../../../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  
  predicate invariant'4 (self : t)
  
  predicate inv'5 (_1 : t)
  
  axiom inv'5 : forall x : t [inv'5 x] . inv'5 x  -> invariant'4 x
  
  use T_alloc__alloc__Global as Global'0
  
  predicate invariant'3 (self : t) =
    [%#span2] inv'5 self
  
  predicate inv'4 (_1 : t)
  
  axiom inv'4 [@rewrite] : forall x : t [inv'4 x] . inv'4 x = invariant'3 x
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  predicate invariant'2 (self : Seq.seq t) =
    [%#span3] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'4 (Seq.get self i)
  
  predicate inv'3 (_1 : Seq.seq t)
  
  axiom inv'3 [@rewrite] : forall x : Seq.seq t [inv'3 x] . inv'3 x = invariant'2 x
  
  use T_alloc__vec__Vec as Vec'1
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.UIntSize
  
  constant v_MAX'0 : usize = [%#span4] (18446744073709551615 : usize)
  
  function shallow_model'2 (self : Vec'1.t_Vec t (Global'0.t_Global)) : Seq.seq t
  
  axiom shallow_model'2_spec : forall self : Vec'1.t_Vec t (Global'0.t_Global) . [%#span5] Seq.length (shallow_model'2 self)
  <= UIntSize.to_int (v_MAX'0 : usize)
  
  predicate invariant'1 (self : Vec'1.t_Vec t (Global'0.t_Global)) =
    [%#span6] inv'3 (shallow_model'2 self)
  
  predicate inv'2 (_1 : Vec'1.t_Vec t (Global'0.t_Global))
  
  axiom inv'2 [@rewrite] : forall x : Vec'1.t_Vec t (Global'0.t_Global) [inv'2 x] . inv'2 x = invariant'1 x
  
  use T_16_impl_cloning__Vec as Vec'0
  
  predicate inv'1 (_1 : Vec'0.t_Vec t)
  
  axiom inv'1 [@rewrite] : forall x : Vec'0.t_Vec t [inv'1 x] . inv'1 x
  = match x with
    | Vec'0.C_Vec a_0 -> inv'2 a_0
    end
  
  use prelude.prelude.Borrow
  
  predicate invariant'0 (self : borrowed (Vec'0.t_Vec t)) =
    [%#span7] inv'1 self.current /\ inv'1 self.final
  
  predicate inv'0 (_1 : borrowed (Vec'0.t_Vec t))
  
  axiom inv'0 [@rewrite] : forall x : borrowed (Vec'0.t_Vec t) [inv'0 x] . inv'0 x = invariant'0 x
  
  function shallow_model'1 [#"../16_impl_cloning.rs" 11 4 11 50] (self : Vec'0.t_Vec t) : Seq.seq t
  
  function shallow_model'0 (self : borrowed (Vec'0.t_Vec t)) : Seq.seq t =
    [%#span9] shallow_model'1 self.current
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'1 (self : borrowed (Vec'0.t_Vec t)) =
    [%#span10] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed (Vec'0.t_Vec t)) =
    resolve'1 _1
  
  meta "compute_max_steps" 1000000
  
  let rec test (x:borrowed (Vec'0.t_Vec t)) (return'  (ret:()))= {[%#s16_impl_cloning0] inv'0 x}
    (! bb0 [ bb0 = s0 [ s0 = {[@expl:type invariant] inv'0 x} s1 | s1 = -{resolve'0 x}- s2 | s2 = return' {_0} ]  ] )
    [ & _0 : () = any_l () | & x : borrowed (Vec'0.t_Vec t) = x ]
    
    [ return' (result:())-> {[@expl:postcondition] [%#s16_impl_cloning1] shallow_model'0 x = shallow_model'1 x.current}
      (! return' {result}) ]
    
end
module M_16_impl_cloning__qyi7489562397461717233 [#"../16_impl_cloning.rs" 6 0 6 31] (* <Vec<T> as creusot_contracts::ShallowModel> *)
  type t
end
