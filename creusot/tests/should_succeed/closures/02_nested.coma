
module M_02_nested__nested_closure__qy123zclosureqy35z0qy125z__qy123zclosureqy35z0qy125z_Type [#"../02_nested.rs" 6 18 6 20]
  use prelude.prelude.Int8
  
  use prelude.prelude.Borrow
  
  type m_02_nested__nested_closure__qy123zclosureqy35z0qy125z__qy123zclosureqy35z0qy125z  =
    | M_02_nested__nested_closure__qy123zclosureqy35z0qy125z__qy123zclosureqy35z0qy125z bool
  
  let rec m_02_nested__nested_closure__qy123zclosureqy35z0qy125z__qy123zclosureqy35z0qy125z (input:m_02_nested__nested_closure__qy123zclosureqy35z0qy125z__qy123zclosureqy35z0qy125z) (ret  (a:bool))= any
    [ good (a:bool)-> {M_02_nested__nested_closure__qy123zclosureqy35z0qy125z__qy123zclosureqy35z0qy125z a = input}
      (! ret {a}) ]
    
end
module M_02_nested__nested_closure__qy123zclosureqy35z0qy125z__qy123zclosureqy35z0qy125z [#"../02_nested.rs" 6 18 6 20]
  use prelude.prelude.Int8
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Borrow
  
  use M_02_nested__nested_closure__qy123zclosureqy35z0qy125z__qy123zclosureqy35z0qy125z_Type as Closure'0
  
  meta "compute_max_steps" 1000000
  
  let rec m_02_nested__nested_closure__qy123zclosureqy35z0qy125z__qy123zclosureqy35z0qy125z (_1:Closure'0.m_02_nested__nested_closure__qy123zclosureqy35z0qy125z__qy123zclosureqy35z0qy125z) (return'  (ret:bool))= (! bb0
    [ bb0 = s0
      [ s0 = Closure'0.m_02_nested__nested_closure__qy123zclosureqy35z0qy125z__qy123zclosureqy35z0qy125z {_1}
          (fun (r'0:bool) ->  [ &_0 <- r'0 ] s1)
      | s1 = return' {_0} ]
       ]
    )
    [ & _0 : bool = any_l ()
    | & _1 : Closure'0.m_02_nested__nested_closure__qy123zclosureqy35z0qy125z__qy123zclosureqy35z0qy125z = _1 ]
     [ return' (result:bool)-> (! return' {result}) ] 
end
module M_02_nested__nested_closure__qy123zclosureqy35z0qy125z_Type [#"../02_nested.rs" 5 14 5 16]
  use prelude.prelude.Int8
  
  use prelude.prelude.Borrow
  
  type m_02_nested__nested_closure__qy123zclosureqy35z0qy125z  =
    | M_02_nested__nested_closure__qy123zclosureqy35z0qy125z bool
  
  let rec m_02_nested__nested_closure__qy123zclosureqy35z0qy125z (input:m_02_nested__nested_closure__qy123zclosureqy35z0qy125z) (ret  (a:bool))= any
    [ good (a:bool)-> {M_02_nested__nested_closure__qy123zclosureqy35z0qy125z a = input} (! ret {a}) ]
    
end
module M_02_nested__nested_closure__qy123zclosureqy35z0qy125z [#"../02_nested.rs" 5 14 5 16]
  use prelude.prelude.Int8
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Borrow
  
  use M_02_nested__nested_closure__qy123zclosureqy35z0qy125z__qy123zclosureqy35z0qy125z_Type as Closure'1
  
  let rec closure0'0 (_1:Closure'1.m_02_nested__nested_closure__qy123zclosureqy35z0qy125z__qy123zclosureqy35z0qy125z) (return'  (ret:bool))= any
    [ return' (result:bool)-> (! return' {result}) ]
    
  
  use M_02_nested__nested_closure__qy123zclosureqy35z0qy125z_Type as Closure'0
  
  meta "compute_max_steps" 1000000
  
  let rec m_02_nested__nested_closure__qy123zclosureqy35z0qy125z (_1:Closure'0.m_02_nested__nested_closure__qy123zclosureqy35z0qy125z) (return'  (ret:bool))= (! bb0
    [ bb0 = s0
      [ s0 = Closure'0.m_02_nested__nested_closure__qy123zclosureqy35z0qy125z {_1}
          (fun (r'0:bool) ->
            
            [ &omg <- Closure'1.M_02_nested__nested_closure__qy123zclosureqy35z0qy125z__qy123zclosureqy35z0qy125z r'0 ]
            
            s1)
      | s1 = closure0'0 {omg} (fun (_ret':bool) ->  [ &_0 <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = return' {_0} ]
    )
    [ & _0 : bool = any_l ()
    | & _1 : Closure'0.m_02_nested__nested_closure__qy123zclosureqy35z0qy125z = _1
    | & omg : Closure'1.m_02_nested__nested_closure__qy123zclosureqy35z0qy125z__qy123zclosureqy35z0qy125z = any_l ()
    | & _5 : () = any_l () ]
     [ return' (result:bool)-> (! return' {result}) ] 
end
module M_02_nested__nested_closure [#"../02_nested.rs" 3 0 3 23]
  let%span s02_nested0 = "../02_nested.rs" 4 12 4 16
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Int8
  
  use M_02_nested__nested_closure__qy123zclosureqy35z0qy125z__qy123zclosureqy35z0qy125z_Type as Closure'1
  
  let rec closure0'1 (_1:Closure'1.m_02_nested__nested_closure__qy123zclosureqy35z0qy125z__qy123zclosureqy35z0qy125z) (return'  (ret:bool))= any
    [ return' (result:bool)-> (! return' {result}) ]
    
  
  use M_02_nested__nested_closure__qy123zclosureqy35z0qy125z_Type as Closure'0
  
  let rec closure0'0 (_1:Closure'0.m_02_nested__nested_closure__qy123zclosureqy35z0qy125z) (return'  (ret:bool))= any
    [ return' (result:bool)-> (! return' {result}) ]
    
  
  meta "compute_max_steps" 1000000
  
  let rec nested_closure (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &a <- [%#s02_nested0] true ] s1
      | s1 =  [ &_4 <- Closure'0.M_02_nested__nested_closure__qy123zclosureqy35z0qy125z a ] s2
      | s2 = closure0'0 {_4} (fun (_ret':bool) ->  [ &_a <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = return' {_0} ]
    )
    [ & _0 : () = any_l ()
    | & a : bool = any_l ()
    | & _a : bool = any_l ()
    | & _4 : Closure'0.m_02_nested__nested_closure__qy123zclosureqy35z0qy125z = any_l ()
    | & _6 : () = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
