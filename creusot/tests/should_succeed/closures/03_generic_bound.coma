
module M_03_generic_bound__closure_param [#"../03_generic_bound.rs" 5 0 5 34]
  type f
  
  let%span s03_generic_bound0 = "../03_generic_bound.rs" 6 8 6 9
  let%span s03_generic_bound1 = "../03_generic_bound.rs" 5 29 5 30
  let%span span2 = "../../../../../creusot-contracts/src/std/ops.rs" 122 14 122 133
  let%span span3 = "../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29
  let%span span4 = "../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26
  let%span span5 = "../../../../../creusot-contracts/src/std/ops.rs" 116 14 116 28
  let%span span6 = "../../../../../creusot-contracts/src/std/ops.rs" 109 14 109 31
  let%span span7 = "../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48
  let%span span8 = "../../../../../creusot-contracts/src/std/ops.rs" 104 14 104 35
  let%span span9 = "../../../../../creusot-contracts/src/std/ops.rs" 144 14 144 101
  let%span span10 = "../../../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  let%span span11 = "../../../../../creusot-contracts/src/std/ops.rs" 138 14 138 100
  let%span span12 = "../../../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  let%span span13 = "../../../../../creusot-contracts/src/std/ops.rs" 166 27 166 52
  let%span span14 = "" 0 0 0 0
  let%span span15 = "" 0 0 0 0
  let%span span16 = "../../../../../creusot-contracts/src/std/ops.rs" 148 0 172 1
  let%span span17 = "" 0 0 0 0
  
  use prelude.prelude.Borrow
  
  predicate resolve'0 (_1 : f)
  
  use prelude.prelude.UInt32
  
  predicate postcondition_mut'0 (self : borrowed f) (_2 : uint32) (_3 : ())
  
  predicate postcondition_once'0 (self : f) (_2 : uint32) (_3 : ())
  
  function fn_mut_once'0 (self : f) (args : uint32) (res : ()) : ()
  
  axiom fn_mut_once'0_spec : forall self : f, args : uint32, res : () . [%#span2] postcondition_once'0 self args res
  = (exists s : borrowed f . s.current = self /\ postcondition_mut'0 s args res /\ resolve'0 s.final)
  
  predicate unnest'0 (self : f) (_2 : f)
  
  function unnest_trans'0 (self : f) (b : f) (c : f) : ()
  
  axiom unnest_trans'0_spec : forall self : f, b : f, c : f . ([%#span3] unnest'0 self b)
   -> ([%#span4] unnest'0 b c)  -> ([%#span5] unnest'0 self c)
  
  function unnest_refl'0 (self : f) : ()
  
  axiom unnest_refl'0_spec : forall self : f . [%#span6] unnest'0 self self
  
  function postcondition_mut_unnest'0 (self : borrowed f) (args : uint32) (res : ()) : ()
  
  axiom postcondition_mut_unnest'0_spec : forall self : borrowed f, args : uint32, res : () . ([%#span7] postcondition_mut'0 self args res)
   -> ([%#span8] unnest'0 self.current self.final)
  
  predicate inv'3 (_1 : ())
  
  axiom inv'3 [@rewrite] : forall x : () [inv'3 x] . inv'3 x = true
  
  predicate postcondition'0 (self : f) (_2 : uint32) (_3 : ())
  
  function fn_once'0 (self : f) (args : uint32) (res : ()) : ()
  
  axiom fn_once'0_spec : forall self : f, args : uint32, res : () . [%#span9] postcondition_once'0 self args res
  = (resolve'0 self /\ postcondition'0 self args res)
  
  predicate resolve'2 (self : borrowed f) =
    [%#span10] self.final = self.current
  
  function fn_mut'0 (self : borrowed f) (args : uint32) (res : ()) : ()
  
  axiom fn_mut'0_spec : forall self : borrowed f, args : uint32, res : () . [%#span11] postcondition_mut'0 self args res
  = (resolve'2 self /\ postcondition'0 self.current args res)
  
  predicate inv'2 (_1 : uint32)
  
  axiom inv'2 [@rewrite] : forall x : uint32 [inv'2 x] . inv'2 x = true
  
  predicate inv'0 (_1 : f)
  
  predicate invariant'1 (self : f) =
    [%#span12] inv'0 self
  
  predicate inv'1 (_1 : f)
  
  axiom inv'1 [@rewrite] : forall x : f [inv'1 x] . inv'1 x = invariant'1 x
  
  predicate invariant'0 (self : f)
  
  axiom inv'0 : forall x : f [inv'0 x] . inv'0 x  -> invariant'0 x
  
  use prelude.prelude.Intrinsic
  
  predicate precondition'0 (self : f) (_2 : uint32)
  
  let rec call'0 (self:f) (args:uint32) (return'  (ret:()))= {[@expl:precondition] [%#span15] inv'2 args}
    {[@expl:precondition] [%#span14] inv'1 self}
    {[@expl:precondition] [%#span13] precondition'0 self args}
    any
    [ return' (result:())-> {[%#span17] inv'3 result}
      {[%#span16] postcondition'0 self args result}
      (! return' {result}) ]
    
  
  use prelude.prelude.Int
  
  meta "compute_max_steps" 1000000
  
  let rec closure_param (f:f) (return'  (ret:()))= {[%#s03_generic_bound1] inv'0 f}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &_3 <- (([%#s03_generic_bound0] (0 : uint32))) ] s1
      | s1 = call'0 {f} {_3} (fun (_ret':()) ->  [ &_0 <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = s0 [ s0 = {[@expl:type invariant] inv'0 f} s1 | s1 = -{resolve'0 f}- s2 | s2 = bb2 ] 
    | bb2 = return' {_0} ]
    ) [ & _0 : () = any_l () | & f : f = f | & _3 : uint32 = any_l () ]  [ return' (result:())-> (! return' {result}) ] 
end
module M_03_generic_bound__caller__qy123zclosureqy35z0qy125z_Type [#"../03_generic_bound.rs" 10 18 10 27]
  use prelude.prelude.UInt32
  
  use prelude.prelude.Int8
  
  type m_03_generic_bound__caller__qy123zclosureqy35z0qy125z  =
    | M_03_generic_bound__caller__qy123zclosureqy35z0qy125z
  
  let rec m_03_generic_bound__caller__qy123zclosureqy35z0qy125z (input:m_03_generic_bound__caller__qy123zclosureqy35z0qy125z) (ret  )= any
    [ good -> {M_03_generic_bound__caller__qy123zclosureqy35z0qy125z  = input} (! ret) ]
    
end
module M_03_generic_bound__caller__qy123zclosureqy35z0qy125z [#"../03_generic_bound.rs" 10 18 10 27]
  use prelude.prelude.Int8
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Int
  
  use M_03_generic_bound__caller__qy123zclosureqy35z0qy125z_Type as Closure'0
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec m_03_generic_bound__caller__qy123zclosureqy35z0qy125z (_1:Closure'0.m_03_generic_bound__caller__qy123zclosureqy35z0qy125z) (_x:uint32) (return'  (ret:()))= (! bb0
    [ bb0 = return' {_0} ]
    ) [ & _0 : () = any_l () ]  [ return' (result:())-> (! return' {result}) ] 
end
module M_03_generic_bound__caller [#"../03_generic_bound.rs" 9 0 9 15]
  let%span span0 = "../03_generic_bound.rs" 5 29 5 30
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Int8
  
  use M_03_generic_bound__caller__qy123zclosureqy35z0qy125z_Type as Closure'0
  
  predicate inv'0 (_1 : Closure'0.m_03_generic_bound__caller__qy123zclosureqy35z0qy125z)
  
  axiom inv'0 [@rewrite] : forall x : Closure'0.m_03_generic_bound__caller__qy123zclosureqy35z0qy125z [inv'0 x] . inv'0 x
  = true
  
  use prelude.prelude.Intrinsic
  
  let rec closure_param'0 (f:Closure'0.m_03_generic_bound__caller__qy123zclosureqy35z0qy125z) (return'  (ret:()))= {[@expl:precondition] [%#span0] inv'0 f}
    any [ return' (result:())-> (! return' {result}) ] 
  
  meta "compute_max_steps" 1000000
  
  let rec caller (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &_1 <- Closure'0.M_03_generic_bound__caller__qy123zclosureqy35z0qy125z ] s1
      | s1 = closure_param'0 {_1} (fun (_ret':()) ->  [ &_0 <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = return' {_0} ]
    ) [ & _0 : () = any_l () | & _1 : Closure'0.m_03_generic_bound__caller__qy123zclosureqy35z0qy125z = any_l () ] 
    [ return' (result:())-> (! return' {result}) ]
    
end
