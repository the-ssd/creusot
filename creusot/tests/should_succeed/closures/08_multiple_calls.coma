
module M_08_multiple_calls__multi_use__qy123zclosureqy35z0qy125z_Type [#"../08_multiple_calls.rs" 5 12 5 31]
  use prelude.prelude.UInt32
  
  use prelude.prelude.Int8
  
  use prelude.prelude.Borrow
  
  type m_08_multiple_calls__multi_use__qy123zclosureqy35z0qy125z 't =
    | M_08_multiple_calls__multi_use__qy123zclosureqy35z0qy125z 't
  
  let rec m_08_multiple_calls__multi_use__qy123zclosureqy35z0qy125z < 't > (input:m_08_multiple_calls__multi_use__qy123zclosureqy35z0qy125z 't) (ret  (x:'t))= any
    [ good (x:'t)-> {M_08_multiple_calls__multi_use__qy123zclosureqy35z0qy125z x = input} (! ret {x}) ]
    
end
module M_08_multiple_calls__multi_use__qy123zclosureqy35z0qy125z [#"../08_multiple_calls.rs" 5 12 5 31]
  type t
  
  let%span s08_multiple_calls0 = "../08_multiple_calls.rs" 8 8 8 9
  let%span s08_multiple_calls1 = "../08_multiple_calls.rs" 5 23 5 29
  let%span span2 = "../../../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  
  predicate invariant'3 (self : t)
  
  predicate inv'4 (_1 : t)
  
  axiom inv'4 : forall x : t [inv'4 x] . inv'4 x  -> invariant'3 x
  
  use prelude.prelude.Borrow
  
  predicate invariant'2 (self : t) =
    [%#span2] inv'4 self
  
  predicate inv'3 (_1 : t)
  
  axiom inv'3 [@rewrite] : forall x : t [inv'3 x] . inv'3 x = invariant'2 x
  
  predicate invariant'1 (self : t) =
    [%#span2] inv'3 self
  
  predicate inv'2 (_1 : t)
  
  axiom inv'2 [@rewrite] : forall x : t [inv'2 x] . inv'2 x = invariant'1 x
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Int8
  
  use M_08_multiple_calls__multi_use__qy123zclosureqy35z0qy125z_Type as Closure'0
  
  predicate inv'1 (_1 : Closure'0.m_08_multiple_calls__multi_use__qy123zclosureqy35z0qy125z t)
  
  axiom inv'1 [@rewrite] : forall x : Closure'0.m_08_multiple_calls__multi_use__qy123zclosureqy35z0qy125z t [inv'1 x] . inv'1 x
  = (let Closure'0.M_08_multiple_calls__multi_use__qy123zclosureqy35z0qy125z a = x in inv'2 a)
  
  predicate invariant'0 (self : Closure'0.m_08_multiple_calls__multi_use__qy123zclosureqy35z0qy125z t) =
    [%#span2] inv'1 self
  
  predicate inv'0 (_1 : Closure'0.m_08_multiple_calls__multi_use__qy123zclosureqy35z0qy125z t)
  
  axiom inv'0 [@rewrite] : forall x : Closure'0.m_08_multiple_calls__multi_use__qy123zclosureqy35z0qy125z t [inv'0 x] . inv'0 x
  = invariant'0 x
  
  function field_0'0 [#"../08_multiple_calls.rs" 5 12 5 31] (self : Closure'0.m_08_multiple_calls__multi_use__qy123zclosureqy35z0qy125z t) : t
    
   =
    let Closure'0.M_08_multiple_calls__multi_use__qy123zclosureqy35z0qy125z a = self in a
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Int
  
  meta "compute_max_steps" 1000000
  
  let rec m_08_multiple_calls__multi_use__qy123zclosureqy35z0qy125z (_1:Closure'0.m_08_multiple_calls__multi_use__qy123zclosureqy35z0qy125z t) (return'  (ret:uint32))= {inv'0 _1}
    {[%#s08_multiple_calls1] field_0'0 _1 = field_0'0 _1}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &res <- [%#s08_multiple_calls0] (0 : uint32) ] s1 | s1 =  [ &_0 <- res ] s2 | s2 = return' {_0} ]
       ]
    ) [ & _0 : uint32 = any_l () | & res : uint32 = any_l () ]  [ return' (result:uint32)-> (! return' {result}) ] 
end
module M_08_multiple_calls__multi_use [#"../08_multiple_calls.rs" 4 0 4 26]
  type t
  
  let%span s08_multiple_calls0 = "../08_multiple_calls.rs" 4 20 4 21
  let%span span1 = "../../../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  let%span span2 = "../08_multiple_calls.rs" 5 23 5 29
  let%span span3 = "../08_multiple_calls.rs" 17 11 17 29
  let%span span4 = "../08_multiple_calls.rs" 19 27 19 28
  let%span span5 = "../08_multiple_calls.rs" 18 0 18 70
  
  predicate invariant'2 (self : t)
  
  predicate inv'3 (_1 : t)
  
  axiom inv'3 : forall x : t [inv'3 x] . inv'3 x  -> invariant'2 x
  
  predicate inv'0 (_1 : t)
  
  use prelude.prelude.Borrow
  
  predicate invariant'1 (self : t) =
    [%#span1] inv'0 self
  
  predicate inv'2 (_1 : t)
  
  axiom inv'2 [@rewrite] : forall x : t [inv'2 x] . inv'2 x = invariant'1 x
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Int8
  
  use M_08_multiple_calls__multi_use__qy123zclosureqy35z0qy125z_Type as Closure'0
  
  predicate inv'1 (_1 : Closure'0.m_08_multiple_calls__multi_use__qy123zclosureqy35z0qy125z t)
  
  axiom inv'1 [@rewrite] : forall x : Closure'0.m_08_multiple_calls__multi_use__qy123zclosureqy35z0qy125z t [inv'1 x] . inv'1 x
  = (let Closure'0.M_08_multiple_calls__multi_use__qy123zclosureqy35z0qy125z a = x in inv'2 a)
  
  predicate invariant'0 (self : t) =
    [%#span1] inv'3 self
  
  axiom inv'0 [@rewrite] : forall x : t [inv'0 x] . inv'0 x = invariant'0 x
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Int
  
  predicate postcondition'0 [#"../08_multiple_calls.rs" 5 12 5 31] (self : Closure'0.m_08_multiple_calls__multi_use__qy123zclosureqy35z0qy125z t) (_ : ()) (result : uint32)
    
   =
    true
  
  function field_0'0 [#"../08_multiple_calls.rs" 5 12 5 31] (self : Closure'0.m_08_multiple_calls__multi_use__qy123zclosureqy35z0qy125z t) : t
    
   =
    let Closure'0.M_08_multiple_calls__multi_use__qy123zclosureqy35z0qy125z a = self in a
  
  predicate precondition'0 [#"../08_multiple_calls.rs" 5 12 5 31] (self : Closure'0.m_08_multiple_calls__multi_use__qy123zclosureqy35z0qy125z t) (_ : ())
    
   =
    [%#span2] field_0'0 self = field_0'0 self
  
  let rec uses_fn'0 (f:Closure'0.m_08_multiple_calls__multi_use__qy123zclosureqy35z0qy125z t) (return'  (ret:()))= {[@expl:precondition] [%#span4] inv'1 f}
    {[@expl:precondition] [%#span3] precondition'0 f ()}
    any
    [ return' (result:())-> {[%#span5] exists f2 : Closure'0.m_08_multiple_calls__multi_use__qy123zclosureqy35z0qy125z t, r : uint32 . f2
      = f
      /\ postcondition'0 f2 () r}
      (! return' {result}) ]
    
  
  meta "compute_max_steps" 1000000
  
  let rec multi_use (x:t) (return'  (ret:()))= {[%#s08_multiple_calls0] inv'0 x}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &c <- Closure'0.M_08_multiple_calls__multi_use__qy123zclosureqy35z0qy125z x ] s1
      | s1 = uses_fn'0 {c} (fun (_ret':()) ->  [ &_4 <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = return' {_0} ]
    )
    [ & _0 : () = any_l ()
    | & x : t = x
    | & c : Closure'0.m_08_multiple_calls__multi_use__qy123zclosureqy35z0qy125z t = any_l ()
    | & _4 : () = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
