
module T_core__ops__range__RangeInclusive
  type t_RangeInclusive 'idx =
    | C_RangeInclusive 'idx 'idx bool
  
  function any_l (_ : 'b) : 'a
  
  let rec t_RangeInclusive < 'idx > (input:t_RangeInclusive 'idx) (ret  (start:'idx) (end':'idx) (exhausted:bool))= any
    [ good (start:'idx) (end':'idx) (exhausted:bool)-> {C_RangeInclusive start end' exhausted = input}
      (! ret {start} {end'} {exhausted}) ]
    
end
module T_core__cmp__Ordering
  type t_Ordering  =
    | C_Less
    | C_Equal
    | C_Greater
  
  function any_l (_ : 'b) : 'a
  
  let rec v_Less (input:t_Ordering) (ret  )= any
    [ good -> {C_Less  = input} (! ret) | bad -> {C_Less  <> input} (! {false} any) ]
    
  
  let rec v_Equal (input:t_Ordering) (ret  )= any
    [ good -> {C_Equal  = input} (! ret) | bad -> {C_Equal  <> input} (! {false} any) ]
    
  
  let rec v_Greater (input:t_Ordering) (ret  )= any
    [ good -> {C_Greater  = input} (! ret) | bad -> {C_Greater  <> input} (! {false} any) ]
    
end
module T_core__option__Option
  type t_Option 't =
    | C_None
    | C_Some 't
  
  function any_l (_ : 'b) : 'a
  
  let rec v_None < 't > (input:t_Option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} (! {false} any) ]
    
  
  let rec v_Some < 't > (input:t_Option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : 't [C_Some field_0 : t_Option 't] . C_Some field_0 <> input} (! {false} any) ]
    
end
module T_alloc__alloc__Global
  type t_Global  =
    | C_Global
  
  function any_l (_ : 'b) : 'a
  
  let rec t_Global (input:t_Global) (ret  )= any [ good -> {C_Global  = input} (! ret) ] 
end
module M_sum__sum_first_n [#"../sum.rs" 6 0 6 33]
  let%span ssum0 = "../sum.rs" 7 18 7 19
  let%span ssum1 = "../sum.rs" 9 13 9 14
  let%span ssum2 = "../sum.rs" 8 4 8 67
  let%span ssum3 = "../sum.rs" 8 4 8 67
  let%span ssum4 = "../sum.rs" 8 4 8 67
  let%span ssum5 = "../sum.rs" 8 16 8 65
  let%span ssum6 = "../sum.rs" 8 4 8 67
  let%span ssum7 = "../sum.rs" 4 11 4 20
  let%span ssum8 = "../sum.rs" 5 10 5 38
  let%span span9 = "../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  let%span span10 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span span11 = "../../../../creusot-contracts/src/std/num.rs" 22 16 22 35
  let%span span12 = "../../../../creusot-contracts/src/std/ops.rs" 206 4 206 88
  let%span span13 = "../../../../creusot-contracts/src/std/iter/range.rs" 50 10 50 43
  let%span span14 = "../../../../creusot-contracts/src/std/iter/range.rs" 52 4 55 5
  let%span span15 = "../../../../creusot-contracts/src/std/iter/range.rs" 70 8 76 9
  let%span span16 = "../../../../creusot-contracts/src/std/iter/range.rs" 86 15 86 32
  let%span span17 = "../../../../creusot-contracts/src/std/iter/range.rs" 87 15 87 32
  let%span span18 = "../../../../creusot-contracts/src/std/iter/range.rs" 88 14 88 42
  let%span span19 = "../../../../creusot-contracts/src/std/iter/range.rs" 84 4 84 10
  let%span span20 = "../../../../creusot-contracts/src/std/iter/range.rs" 81 14 81 45
  let%span span21 = "../../../../creusot-contracts/src/std/iter/range.rs" 79 4 79 10
  let%span span22 = "../../../../creusot-contracts/src/logic/seq.rs" 198 8 198 97
  let%span span23 = "../../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  let%span span24 = "../../../../creusot-contracts/src/std/iter/range.rs" 63 12 63 57
  let%span span25 = "" 0 0 0 0
  let%span span26 = "../../../../creusot-contracts/src/std/iter.rs" 105 26 108 17
  let%span span27 = "" 0 0 0 0
  let%span span28 = "../../../../creusot-contracts/src/std/iter.rs" 90 8 90 19
  let%span span29 = "../../../../creusot-contracts/src/std/iter.rs" 84 20 84 24
  let%span span30 = "../../../../creusot-contracts/src/std/iter.rs" 99 0 212 1
  let%span span31 = "" 0 0 0 0
  let%span span32 = "" 0 0 0 0
  let%span span33 = "" 0 0 0 0
  let%span span34 = "" 0 0 0 0
  let%span span35 = "../../../../creusot-contracts/src/std/ops.rs" 220 26 220 53
  let%span span36 = "../../../../creusot-contracts/src/std/ops.rs" 221 26 221 49
  let%span span37 = "../../../../creusot-contracts/src/std/ops.rs" 222 16 222 93
  let%span span38 = "" 0 0 0 0
  
  use prelude.prelude.UInt32
  
  predicate inv'2 (_1 : uint32)
  
  use T_alloc__alloc__Global as Global'0
  
  predicate invariant'5 (self : uint32) =
    [%#span9] inv'2 self
  
  predicate inv'5 (_1 : uint32)
  
  axiom inv'5 [@rewrite] : forall x : uint32 [inv'5 x] . inv'5 x = true
  
  use T_core__option__Option as Option'0
  
  predicate inv'4 (_1 : Option'0.t_Option uint32)
  
  axiom inv'4 [@rewrite] : forall x : Option'0.t_Option uint32 [inv'4 x] . inv'4 x = true
  
  use T_core__ops__range__RangeInclusive as RangeInclusive'0
  
  predicate inv'1 (_1 : RangeInclusive'0.t_RangeInclusive uint32)
  
  use prelude.prelude.Borrow
  
  predicate invariant'3 (self : borrowed (RangeInclusive'0.t_RangeInclusive uint32)) =
    [%#span10] inv'1 self.current /\ inv'1 self.final
  
  predicate inv'3 (_1 : borrowed (RangeInclusive'0.t_RangeInclusive uint32))
  
  axiom inv'3 [@rewrite] : forall x : borrowed (RangeInclusive'0.t_RangeInclusive uint32) [inv'3 x] . inv'3 x = true
  
  axiom inv'2 [@rewrite] : forall x : uint32 [inv'2 x] . inv'2 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  function start_log'0 (self : RangeInclusive'0.t_RangeInclusive uint32) : uint32
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Int
  
  function deep_model'0 (self : uint32) : int =
    [%#span11] UInt32.to_int self
  
  use seq.Seq
  
  function end_log'0 (self : RangeInclusive'0.t_RangeInclusive uint32) : uint32
  
  use int.Int
  
  function is_empty_log'0 (self : RangeInclusive'0.t_RangeInclusive uint32) : bool
  
  axiom is_empty_log'0_spec : forall self : RangeInclusive'0.t_RangeInclusive uint32 . [%#span12] not is_empty_log'0 self
   -> deep_model'0 (start_log'0 self) <= deep_model'0 (end_log'0 self)
  
  function range_inclusive_len'0 (r : RangeInclusive'0.t_RangeInclusive uint32) : int =
    [%#span14] if is_empty_log'0 r then 0 else deep_model'0 (end_log'0 r) - deep_model'0 (start_log'0 r) + 1
  
  axiom range_inclusive_len'0_spec : forall r : RangeInclusive'0.t_RangeInclusive uint32 . [%#span13] is_empty_log'0 r
  = (range_inclusive_len'0 r = 0)
  
  use seq.Seq
  
  predicate produces'0 (self : RangeInclusive'0.t_RangeInclusive uint32) (visited : Seq.seq uint32) (o : RangeInclusive'0.t_RangeInclusive uint32)
    
   =
    [%#span15] Seq.length visited = range_inclusive_len'0 self - range_inclusive_len'0 o
    /\ (is_empty_log'0 self  -> is_empty_log'0 o)
    /\ (is_empty_log'0 o \/ end_log'0 self = end_log'0 o)
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> deep_model'0 (Seq.get visited i) = deep_model'0 (start_log'0 self) + i)
  
  function produces_trans'0 (a : RangeInclusive'0.t_RangeInclusive uint32) (ab : Seq.seq uint32) (b : RangeInclusive'0.t_RangeInclusive uint32) (bc : Seq.seq uint32) (c : RangeInclusive'0.t_RangeInclusive uint32) : ()
    
   =
    [%#span19] ()
  
  axiom produces_trans'0_spec : forall a : RangeInclusive'0.t_RangeInclusive uint32, ab : Seq.seq uint32, b : RangeInclusive'0.t_RangeInclusive uint32, bc : Seq.seq uint32, c : RangeInclusive'0.t_RangeInclusive uint32 . ([%#span16] produces'0 a ab b)
   -> ([%#span17] produces'0 b bc c)  -> ([%#span18] produces'0 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'0 (self : RangeInclusive'0.t_RangeInclusive uint32) : () =
    [%#span21] ()
  
  axiom produces_refl'0_spec : forall self : RangeInclusive'0.t_RangeInclusive uint32 . [%#span20] produces'0 self (Seq.empty  : Seq.seq uint32) self
  
  axiom inv'1 [@rewrite] : forall x : RangeInclusive'0.t_RangeInclusive uint32 [inv'1 x] . inv'1 x = true
  
  use seq.Seq
  
  predicate invariant'0 (self : Seq.seq uint32) =
    [%#span22] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'5 (Seq.get self i)
  
  predicate inv'0 (_1 : Seq.seq uint32)
  
  axiom inv'0 [@rewrite] : forall x : Seq.seq uint32 [inv'0 x] . inv'0 x = true
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Intrinsic
  
  use seq.Seq
  
  predicate resolve'1 (self : borrowed (RangeInclusive'0.t_RangeInclusive uint32)) =
    [%#span23] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed (RangeInclusive'0.t_RangeInclusive uint32)) =
    resolve'1 _1
  
  predicate completed'0 (self : borrowed (RangeInclusive'0.t_RangeInclusive uint32)) =
    [%#span24] is_empty_log'0 self.current /\ is_empty_log'0 self.final
  
  let rec next'0 (self:borrowed (RangeInclusive'0.t_RangeInclusive uint32)) (return'  (ret:Option'0.t_Option uint32))= {[@expl:precondition] [%#span25] inv'3 self}
    any
    [ return' (result:Option'0.t_Option uint32)-> {[%#span27] inv'4 result}
      {[%#span26] match result with
        | Option'0.C_None -> completed'0 self
        | Option'0.C_Some v -> produces'0 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
    
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  predicate into_iter_post'0 (self : RangeInclusive'0.t_RangeInclusive uint32) (res : RangeInclusive'0.t_RangeInclusive uint32)
    
   =
    [%#span28] self = res
  
  predicate into_iter_pre'0 (self : RangeInclusive'0.t_RangeInclusive uint32) =
    [%#span29] true
  
  let rec into_iter'0 (self:RangeInclusive'0.t_RangeInclusive uint32) (return'  (ret:RangeInclusive'0.t_RangeInclusive uint32))= {[@expl:precondition] [%#span31] inv'1 self}
    {[@expl:precondition] [%#span30] into_iter_pre'0 self}
    any
    [ return' (result:RangeInclusive'0.t_RangeInclusive uint32)-> {[%#span32] inv'1 result}
      {[%#span30] into_iter_post'0 self result}
      (! return' {result}) ]
    
  
  let rec new'0 (start:uint32) (end':uint32) (return'  (ret:RangeInclusive'0.t_RangeInclusive uint32))= {[@expl:precondition] [%#span34] inv'2 end'}
    {[@expl:precondition] [%#span33] inv'2 start}
    any
    [ return' (result:RangeInclusive'0.t_RangeInclusive uint32)-> {[%#span38] inv'1 result}
      {[%#span37] deep_model'0 start <= deep_model'0 end'  -> not is_empty_log'0 result}
      {[%#span36] end_log'0 result = end'}
      {[%#span35] start_log'0 result = start}
      (! return' {result}) ]
    
  
  meta "compute_max_steps" 1000000
  
  let rec sum_first_n (n:uint32) (return'  (ret:uint32))= {[%#ssum7] UInt32.to_int n < 1000}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &sum <- [%#ssum0] (0 : uint32) ] s1
      | s1 = new'0 {[%#ssum1] (1 : uint32)} {n}
          (fun (_ret':RangeInclusive'0.t_RangeInclusive uint32) ->  [ &_7 <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = s0
      [ s0 = into_iter'0 {_7} (fun (_ret':RangeInclusive'0.t_RangeInclusive uint32) ->  [ &iter <- _ret' ] s1)
      | s1 = bb2 ]
      
    | bb2 = s0 [ s0 =  [ &iter_old <- [%#ssum2] Snapshot.new iter ] s1 | s1 = bb3 ] 
    | bb3 = s0 [ s0 =  [ &produced <- [%#ssum3] Snapshot.new (Seq.empty  : Seq.seq uint32) ] s1 | s1 = bb4 ] 
    | bb4 = bb5
    | bb5 = bb5
      [ bb5 = {[@expl:loop invariant] [%#ssum5] UInt32.to_int sum
        = div (Seq.length (Snapshot.inner produced) * (Seq.length (Snapshot.inner produced) + 1)) 2}
        {[@expl:loop invariant] [%#ssum4] produces'0 (Snapshot.inner iter_old) (Snapshot.inner produced) iter}
        {[@expl:loop invariant] [%#ssum4] inv'1 iter}
        {[@expl:loop invariant] [%#ssum4] inv'0 (Snapshot.inner produced)}
        (! s0) [ s0 = bb6 ] 
        [ bb6 = s0
          [ s0 = Borrow.borrow_mut <RangeInclusive'0.t_RangeInclusive uint32> {iter}
              (fun (_ret':borrowed (RangeInclusive'0.t_RangeInclusive uint32)) ->
                 [ &_20 <- _ret' ] 
                 [ &iter <- _ret'.final ] 
                s1)
          | s1 = Borrow.borrow_final <RangeInclusive'0.t_RangeInclusive uint32> {_20.current} {Borrow.get_id _20}
              (fun (_ret':borrowed (RangeInclusive'0.t_RangeInclusive uint32)) ->
                 [ &_19 <- _ret' ] 
                 [ &_20 <- { _20 with current = _ret'.final ; } ] 
                s2)
          | s2 = next'0 {_19} (fun (_ret':Option'0.t_Option uint32) ->  [ &_18 <- _ret' ] s3)
          | s3 = bb7 ]
          
        | bb7 = s0
          [ s0 = -{resolve'0 _20}- s1
          | s1 = any
            [ br0 -> {_18 = Option'0.C_None } (! bb10) | br1 (a:uint32)-> {_18 = Option'0.C_Some a} (! bb9) ]
             ]
          
        | bb9 = bb11
        | bb11 = s0
          [ s0 = Option'0.v_Some <uint32> {_18} (fun (r0'0:uint32) ->  [ &__creusot_proc_iter_elem <- r0'0 ] s1)
          | s1 = 
            [ &_23 <- [%#ssum6] Snapshot.new (Seq.(++) (Snapshot.inner produced) (Seq.singleton __creusot_proc_iter_elem)) ]
            
            s2
          | s2 = bb12 ]
          
        | bb12 = s0
          [ s0 =  [ &produced <- _23 ] s1
          | s1 =  [ &i <- __creusot_proc_iter_elem ] s2
          | s2 = UInt32.add {sum} {i} (fun (_ret':uint32) ->  [ &sum <- _ret' ] s3)
          | s3 = bb5 ]
           ]
         ]
      
    | bb10 = s0 [ s0 =  [ &_0 <- sum ] s1 | s1 = return' {_0} ]  ]
    )
    [ & _0 : uint32 = any_l ()
    | & n : uint32 = n
    | & sum : uint32 = any_l ()
    | & iter : RangeInclusive'0.t_RangeInclusive uint32 = any_l ()
    | & _7 : RangeInclusive'0.t_RangeInclusive uint32 = any_l ()
    | & iter_old : Snapshot.snap_ty (RangeInclusive'0.t_RangeInclusive uint32) = any_l ()
    | & produced : Snapshot.snap_ty (Seq.seq uint32) = any_l ()
    | & _18 : Option'0.t_Option uint32 = any_l ()
    | & _19 : borrowed (RangeInclusive'0.t_RangeInclusive uint32) = any_l ()
    | & _20 : borrowed (RangeInclusive'0.t_RangeInclusive uint32) = any_l ()
    | & __creusot_proc_iter_elem : uint32 = any_l ()
    | & _23 : Snapshot.snap_ty (Seq.seq uint32) = any_l ()
    | & i : uint32 = any_l () ]
    
    [ return' (result:uint32)-> {[@expl:postcondition] [%#ssum8] UInt32.to_int result
      = div (UInt32.to_int n * (UInt32.to_int n + 1)) 2}
      (! return' {result}) ]
    
end
