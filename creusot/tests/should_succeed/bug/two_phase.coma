
module T_core__ptr__non_null__NonNull
  use prelude.prelude.Opaque
  
  type t_NonNull 't =
    | C_NonNull opaque_ptr
  
  function any_l (_ : 'b) : 'a
  
  let rec t_NonNull < 't > (input:t_NonNull 't) (ret  (pointer:opaque_ptr))= any
    [ good (pointer:opaque_ptr)-> {C_NonNull pointer = input} (! ret {pointer}) ]
    
end
module T_core__marker__PhantomData
  type t_PhantomData 't =
    | C_PhantomData
  
  function any_l (_ : 'b) : 'a
  
  let rec t_PhantomData < 't > (input:t_PhantomData 't) (ret  )= any [ good -> {C_PhantomData  = input} (! ret) ] 
end
module T_core__ptr__unique__Unique
  use T_core__marker__PhantomData as PhantomData'0
  
  use T_core__ptr__non_null__NonNull as NonNull'0
  
  type t_Unique 't =
    | C_Unique (NonNull'0.t_NonNull 't) (PhantomData'0.t_PhantomData 't)
  
  function any_l (_ : 'b) : 'a
  
  let rec t_Unique < 't > (input:t_Unique 't) (ret  (pointer:NonNull'0.t_NonNull 't) (_marker:PhantomData'0.t_PhantomData 't))= any
    [ good (pointer:NonNull'0.t_NonNull 't) (_marker:PhantomData'0.t_PhantomData 't)-> {C_Unique pointer _marker
      = input}
      (! ret {pointer} {_marker}) ]
    
end
module T_alloc__raw_vec__Cap
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  type t_Cap  =
    | C_Cap usize
  
  function any_l (_ : 'b) : 'a
  
  let rec t_Cap (input:t_Cap) (ret  (field_0:usize))= any
    [ good (field_0:usize)-> {C_Cap field_0 = input} (! ret {field_0}) ]
    
end
module T_alloc__raw_vec__RawVec
  use T_alloc__raw_vec__Cap as Cap'0
  
  use T_core__ptr__unique__Unique as Unique'0
  
  type t_RawVec 't 'a =
    | C_RawVec (Unique'0.t_Unique 't) (Cap'0.t_Cap) 'a
  
  function any_l (_ : 'b) : 'a
  
  let rec t_RawVec < 't > < 'a > (input:t_RawVec 't 'a) (ret  (ptr:Unique'0.t_Unique 't) (cap:Cap'0.t_Cap) (alloc:'a))= any
    [ good (ptr:Unique'0.t_Unique 't) (cap:Cap'0.t_Cap) (alloc:'a)-> {C_RawVec ptr cap alloc = input}
      (! ret {ptr} {cap} {alloc}) ]
    
end
module T_alloc__vec__Vec
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use T_alloc__raw_vec__RawVec as RawVec'0
  
  type t_Vec 't 'a =
    | C_Vec (RawVec'0.t_RawVec 't 'a) usize
  
  function any_l (_ : 'b) : 'a
  
  let rec t_Vec < 't > < 'a > (input:t_Vec 't 'a) (ret  (buf:RawVec'0.t_RawVec 't 'a) (len:usize))= any
    [ good (buf:RawVec'0.t_RawVec 't 'a) (len:usize)-> {C_Vec buf len = input} (! ret {buf} {len}) ]
    
end
module T_alloc__alloc__Global
  type t_Global  =
    | C_Global
  
  function any_l (_ : 'b) : 'a
  
  let rec t_Global (input:t_Global) (ret  )= any [ good -> {C_Global  = input} (! ret) ] 
end
module M_two_phase__test [#"../two_phase.rs" 6 0 6 31]
  let%span stwo_phase0 = "../two_phase.rs" 5 10 5 37
  let%span span1 = "../../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  let%span span2 = "../../../../../creusot-contracts/src/logic/seq.rs" 198 8 198 97
  let%span span3 = "" 0 0 0 0
  let%span span4 = "../../../../../creusot-contracts/src/std/vec.rs" 19 14 19 41
  let%span span5 = "../../../../../creusot-contracts/src/std/vec.rs" 68 20 68 41
  let%span span6 = "../../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span span7 = "../../../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  let%span span8 = "../../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31
  let%span span9 = "../../../../../creusot-contracts/src/model.rs" 108 8 108 31
  let%span span10 = "../../../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  let%span span11 = "" 0 0 0 0
  let%span span12 = "" 0 0 0 0
  let%span span13 = "../../../../../creusot-contracts/src/std/vec.rs" 90 26 90 51
  let%span span14 = "../../../../../creusot-contracts/src/model.rs" 90 8 90 31
  let%span span15 = "" 0 0 0 0
  let%span span16 = "../../../../../creusot-contracts/src/std/vec.rs" 86 26 86 48
  
  use prelude.prelude.UIntSize
  
  predicate inv'2 (_1 : usize)
  
  use T_alloc__alloc__Global as Global'0
  
  predicate invariant'5 (self : usize) =
    [%#span1] inv'2 self
  
  predicate inv'5 (_1 : usize)
  
  axiom inv'5 [@rewrite] : forall x : usize [inv'5 x] . inv'5 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  predicate invariant'4 (self : Seq.seq usize) =
    [%#span2] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'5 (Seq.get self i)
  
  predicate inv'4 (_1 : Seq.seq usize)
  
  axiom inv'4 [@rewrite] : forall x : Seq.seq usize [inv'4 x] . inv'4 x = true
  
  use T_alloc__vec__Vec as Vec'0
  
  use prelude.prelude.UIntSize
  
  constant v_MAX'0 : usize = [%#span3] (18446744073709551615 : usize)
  
  function shallow_model'2 (self : Vec'0.t_Vec usize (Global'0.t_Global)) : Seq.seq usize
  
  axiom shallow_model'2_spec : forall self : Vec'0.t_Vec usize (Global'0.t_Global) . [%#span4] Seq.length (shallow_model'2 self)
  <= UIntSize.to_int (v_MAX'0 : usize)
  
  predicate invariant'3 (self : Vec'0.t_Vec usize (Global'0.t_Global)) =
    [%#span5] inv'4 (shallow_model'2 self)
  
  predicate inv'3 (_1 : Vec'0.t_Vec usize (Global'0.t_Global))
  
  axiom inv'3 [@rewrite] : forall x : Vec'0.t_Vec usize (Global'0.t_Global) [inv'3 x] . inv'3 x = true
  
  axiom inv'2 [@rewrite] : forall x : usize [inv'2 x] . inv'2 x = true
  
  use prelude.prelude.Borrow
  
  predicate invariant'1 (self : borrowed (Vec'0.t_Vec usize (Global'0.t_Global))) =
    [%#span6] inv'3 self.current /\ inv'3 self.final
  
  predicate inv'1 (_1 : borrowed (Vec'0.t_Vec usize (Global'0.t_Global)))
  
  axiom inv'1 [@rewrite] : forall x : borrowed (Vec'0.t_Vec usize (Global'0.t_Global)) [inv'1 x] . inv'1 x = true
  
  predicate invariant'0 (self : Vec'0.t_Vec usize (Global'0.t_Global)) =
    [%#span7] inv'3 self
  
  predicate inv'0 (_1 : Vec'0.t_Vec usize (Global'0.t_Global))
  
  axiom inv'0 [@rewrite] : forall x : Vec'0.t_Vec usize (Global'0.t_Global) [inv'0 x] . inv'0 x = true
  
  use seq.Seq
  
  function index_logic'0 [@inline:trivial] (self : Vec'0.t_Vec usize (Global'0.t_Global)) (ix : int) : usize =
    [%#span8] Seq.get (shallow_model'2 self) ix
  
  function shallow_model'0 (self : borrowed (Vec'0.t_Vec usize (Global'0.t_Global))) : Seq.seq usize =
    [%#span9] shallow_model'2 self.current
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'1 (self : borrowed (Vec'0.t_Vec usize (Global'0.t_Global))) =
    [%#span10] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed (Vec'0.t_Vec usize (Global'0.t_Global))) =
    resolve'1 _1
  
  use seq.Seq
  
  let rec push'0 (self:borrowed (Vec'0.t_Vec usize (Global'0.t_Global))) (value:usize) (return'  (ret:()))= {[@expl:precondition] [%#span12] inv'2 value}
    {[@expl:precondition] [%#span11] inv'1 self}
    any
    [ return' (result:())-> {[%#span13] shallow_model'2 self.final = Seq.snoc (shallow_model'0 self) value}
      (! return' {result}) ]
    
  
  function shallow_model'1 (self : Vec'0.t_Vec usize (Global'0.t_Global)) : Seq.seq usize =
    [%#span14] shallow_model'2 self
  
  let rec len'0 (self:Vec'0.t_Vec usize (Global'0.t_Global)) (return'  (ret:usize))= {[@expl:precondition] [%#span15] inv'0 self}
    any
    [ return' (result:usize)-> {[%#span16] UIntSize.to_int result = Seq.length (shallow_model'1 self)}
      (! return' {result}) ]
    
  
  meta "compute_max_steps" 1000000
  
  let rec test (v:borrowed (Vec'0.t_Vec usize (Global'0.t_Global))) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 = Borrow.borrow_final <Vec'0.t_Vec usize (Global'0.t_Global)> {v.current} {Borrow.get_id v}
          (fun (_ret':borrowed (Vec'0.t_Vec usize (Global'0.t_Global))) ->
             [ &_4 <- _ret' ] 
             [ &v <- { v with current = _ret'.final ; } ] 
            s1)
      | s1 = len'0 {_4.current} (fun (_ret':usize) ->  [ &_5 <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = s0 [ s0 = push'0 {_4} {_5} (fun (_ret':()) ->  [ &_3 <- _ret' ] s1) | s1 = bb2 ] 
    | bb2 = s0 [ s0 = -{resolve'0 v}- s1 | s1 = return' {_0} ]  ]
    )
    [ & _0 : () = any_l ()
    | & v : borrowed (Vec'0.t_Vec usize (Global'0.t_Global)) = v
    | & _3 : () = any_l ()
    | & _4 : borrowed (Vec'0.t_Vec usize (Global'0.t_Global)) = any_l ()
    | & _5 : usize = any_l () ]
    
    [ return' (result:())-> {[@expl:postcondition] [%#stwo_phase0] UIntSize.to_int (index_logic'0 v.final (Seq.length (shallow_model'0 v)))
      = Seq.length (shallow_model'0 v)}
      (! return' {result}) ]
    
end
