
module M_immut__f [#"../immut.rs" 3 0 3 10]
  let%span simmut0 = "../immut.rs" 4 16 4 18
  let%span span1 = "../../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.UInt32
  
  predicate resolve'1 (self : borrowed uint32) =
    [%#span1] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed uint32) =
    resolve'1 _1
  
  use prelude.prelude.Int
  
  meta "compute_max_steps" 1000000
  
  let rec f (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &a <- [%#simmut0] (10 : uint32) ] s1
      | s1 = Borrow.borrow_mut <uint32> {a} (fun (_ret':borrowed uint32) ->  [ &b <- _ret' ]  [ &a <- _ret'.final ] s2)
      | s2 =  [ &_c <- b.current ] s3
      | s3 = -{resolve'0 b}- s4
      | s4 = return' {_0} ]
       ]
    ) [ & _0 : () = any_l () | & a : uint32 = any_l () | & b : borrowed uint32 = any_l () | & _c : uint32 = any_l () ] 
    [ return' (result:())-> (! return' {result}) ]
    
end
