
module T_core__ptr__non_null__NonNull
  use prelude.prelude.Opaque
  
  type t_NonNull 't =
    | C_NonNull opaque_ptr
  
  function any_l (_ : 'b) : 'a
  
  let rec t_NonNull < 't > (input:t_NonNull 't) (ret  (pointer:opaque_ptr))= any
    [ good (pointer:opaque_ptr)-> {C_NonNull pointer = input} (! ret {pointer}) ]
    
end
module T_core__marker__PhantomData
  type t_PhantomData 't =
    | C_PhantomData
  
  function any_l (_ : 'b) : 'a
  
  let rec t_PhantomData < 't > (input:t_PhantomData 't) (ret  )= any [ good -> {C_PhantomData  = input} (! ret) ] 
end
module T_core__ptr__unique__Unique
  use T_core__marker__PhantomData as PhantomData'0
  
  use T_core__ptr__non_null__NonNull as NonNull'0
  
  type t_Unique 't =
    | C_Unique (NonNull'0.t_NonNull 't) (PhantomData'0.t_PhantomData 't)
  
  function any_l (_ : 'b) : 'a
  
  let rec t_Unique < 't > (input:t_Unique 't) (ret  (pointer:NonNull'0.t_NonNull 't) (_marker:PhantomData'0.t_PhantomData 't))= any
    [ good (pointer:NonNull'0.t_NonNull 't) (_marker:PhantomData'0.t_PhantomData 't)-> {C_Unique pointer _marker
      = input}
      (! ret {pointer} {_marker}) ]
    
end
module T_alloc__raw_vec__Cap
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  type t_Cap  =
    | C_Cap usize
  
  function any_l (_ : 'b) : 'a
  
  let rec t_Cap (input:t_Cap) (ret  (field_0:usize))= any
    [ good (field_0:usize)-> {C_Cap field_0 = input} (! ret {field_0}) ]
    
end
module T_alloc__raw_vec__RawVec
  use T_alloc__raw_vec__Cap as Cap'0
  
  use T_core__ptr__unique__Unique as Unique'0
  
  type t_RawVec 't 'a =
    | C_RawVec (Unique'0.t_Unique 't) (Cap'0.t_Cap) 'a
  
  function any_l (_ : 'b) : 'a
  
  let rec t_RawVec < 't > < 'a > (input:t_RawVec 't 'a) (ret  (ptr:Unique'0.t_Unique 't) (cap:Cap'0.t_Cap) (alloc:'a))= any
    [ good (ptr:Unique'0.t_Unique 't) (cap:Cap'0.t_Cap) (alloc:'a)-> {C_RawVec ptr cap alloc = input}
      (! ret {ptr} {cap} {alloc}) ]
    
end
module T_alloc__vec__Vec
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use T_alloc__raw_vec__RawVec as RawVec'0
  
  type t_Vec 't 'a =
    | C_Vec (RawVec'0.t_RawVec 't 'a) usize
  
  function any_l (_ : 'b) : 'a
  
  let rec t_Vec < 't > < 'a > (input:t_Vec 't 'a) (ret  (buf:RawVec'0.t_RawVec 't 'a) (len:usize))= any
    [ good (buf:RawVec'0.t_RawVec 't 'a) (len:usize)-> {C_Vec buf len = input} (! ret {buf} {len}) ]
    
end
module T_alloc__alloc__Global
  type t_Global  =
    | C_Global
  
  function any_l (_ : 'b) : 'a
  
  let rec t_Global (input:t_Global) (ret  )= any [ good -> {C_Global  = input} (! ret) ] 
end
module M_13_vec_macro__x [#"../13_vec_macro.rs" 5 0 5 10]
  let%span slib0 = "../../../../../creusot-contracts/src/lib.rs" 292 8 292 30
  let%span s13_vec_macro1 = "../13_vec_macro.rs" 7 20 7 34
  let%span s13_vec_macro2 = "../13_vec_macro.rs" 9 18 9 19
  let%span s13_vec_macro3 = "../13_vec_macro.rs" 9 21 9 22
  let%span s13_vec_macro4 = "../13_vec_macro.rs" 10 20 10 34
  let%span s13_vec_macro5 = "../13_vec_macro.rs" 12 18 12 19
  let%span s13_vec_macro6 = "../13_vec_macro.rs" 12 21 12 22
  let%span s13_vec_macro7 = "../13_vec_macro.rs" 12 24 12 25
  let%span s13_vec_macro8 = "../13_vec_macro.rs" 13 20 13 34
  let%span span9 = "../../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  let%span span10 = "" 0 0 0 0
  let%span span11 = "../../../../../creusot-contracts/src/std/slice.rs" 29 14 29 41
  let%span span12 = "../../../../../creusot-contracts/src/std/slice.rs" 30 14 30 42
  let%span span13 = "../../../../../creusot-contracts/src/std/slice.rs" 18 20 18 30
  let%span span14 = "../../../../../creusot-contracts/src/logic/seq.rs" 198 8 198 97
  let%span span15 = "../../../../../creusot-contracts/src/std/vec.rs" 19 14 19 41
  let%span span16 = "../../../../../creusot-contracts/src/std/vec.rs" 68 20 68 41
  let%span span17 = "../../../../../creusot-contracts/src/std/boxed.rs" 18 8 18 31
  let%span span18 = "" 0 0 0 0
  let%span span19 = "../../../../../creusot-contracts/src/std/slice.rs" 336 18 336 35
  let%span span20 = "" 0 0 0 0
  let%span span21 = "../../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31
  let%span span22 = "" 0 0 0 0
  let%span span23 = "../../../../../creusot-contracts/src/std/vec.rs" 183 22 183 41
  let%span span24 = "../../../../../creusot-contracts/src/std/vec.rs" 184 12 184 78
  let%span span25 = "" 0 0 0 0
  let%span span26 = "../../../../../creusot-contracts/src/std/vec.rs" 77 26 77 44
  let%span span27 = "" 0 0 0 0
  
  use prelude.prelude.UInt32
  
  predicate inv'9 (_1 : uint32)
  
  axiom inv'9 [@rewrite] : forall x : uint32 [inv'9 x] . inv'9 x = true
  
  use prelude.prelude.Int32
  
  predicate inv'1 (_1 : int32)
  
  use T_alloc__alloc__Global as Global'0
  
  predicate invariant'8 (self : int32) =
    [%#span9] inv'1 self
  
  predicate inv'8 (_1 : int32)
  
  axiom inv'8 [@rewrite] : forall x : int32 [inv'8 x] . inv'8 x = true
  
  predicate invariant'7 (self : uint32) =
    [%#span9] inv'9 self
  
  predicate inv'7 (_1 : uint32)
  
  axiom inv'7 [@rewrite] : forall x : uint32 [inv'7 x] . inv'7 x = true
  
  use seq.Seq
  
  predicate inv'5 (_1 : Seq.seq int32)
  
  use prelude.prelude.Slice
  
  use prelude.prelude.Slice
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  constant v_MAX'0 : usize = [%#span10] (18446744073709551615 : usize)
  
  use seq.Seq
  
  function shallow_model'3 (self : slice int32) : Seq.seq int32
  
  axiom shallow_model'3_spec : forall self : slice int32 . ([%#span12] shallow_model'3 self = Slice.id self)
  && ([%#span11] Seq.length (shallow_model'3 self) <= UIntSize.to_int (v_MAX'0 : usize))
  
  predicate invariant'6 (self : slice int32) =
    [%#span13] inv'5 (shallow_model'3 self)
  
  predicate inv'6 (_1 : slice int32)
  
  axiom inv'6 [@rewrite] : forall x : slice int32 [inv'6 x] . inv'6 x = true
  
  use seq.Seq
  
  predicate invariant'5 (self : Seq.seq int32) =
    [%#span14] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'8 (Seq.get self i)
  
  axiom inv'5 [@rewrite] : forall x : Seq.seq int32 [inv'5 x] . inv'5 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  predicate invariant'4 (self : Seq.seq uint32) =
    [%#span14] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'7 (Seq.get self i)
  
  predicate inv'4 (_1 : Seq.seq uint32)
  
  axiom inv'4 [@rewrite] : forall x : Seq.seq uint32 [inv'4 x] . inv'4 x = true
  
  predicate invariant'3 (self : slice int32) =
    [%#span9] inv'6 self
  
  predicate inv'3 (_1 : slice int32)
  
  axiom inv'3 [@rewrite] : forall x : slice int32 [inv'3 x] . inv'3 x = true
  
  use T_alloc__vec__Vec as Vec'0
  
  function shallow_model'1 (self : Vec'0.t_Vec int32 (Global'0.t_Global)) : Seq.seq int32
  
  axiom shallow_model'1_spec : forall self : Vec'0.t_Vec int32 (Global'0.t_Global) . [%#span15] Seq.length (shallow_model'1 self)
  <= UIntSize.to_int (v_MAX'0 : usize)
  
  predicate invariant'2 (self : Vec'0.t_Vec int32 (Global'0.t_Global)) =
    [%#span16] inv'5 (shallow_model'1 self)
  
  predicate inv'2 (_1 : Vec'0.t_Vec int32 (Global'0.t_Global))
  
  axiom inv'2 [@rewrite] : forall x : Vec'0.t_Vec int32 (Global'0.t_Global) [inv'2 x] . inv'2 x = true
  
  axiom inv'1 [@rewrite] : forall x : int32 [inv'1 x] . inv'1 x = true
  
  function shallow_model'0 (self : Vec'0.t_Vec uint32 (Global'0.t_Global)) : Seq.seq uint32
  
  axiom shallow_model'0_spec : forall self : Vec'0.t_Vec uint32 (Global'0.t_Global) . [%#span15] Seq.length (shallow_model'0 self)
  <= UIntSize.to_int (v_MAX'0 : usize)
  
  predicate invariant'0 (self : Vec'0.t_Vec uint32 (Global'0.t_Global)) =
    [%#span16] inv'4 (shallow_model'0 self)
  
  predicate inv'0 (_1 : Vec'0.t_Vec uint32 (Global'0.t_Global))
  
  axiom inv'0 [@rewrite] : forall x : Vec'0.t_Vec uint32 (Global'0.t_Global) [inv'0 x] . inv'0 x = true
  
  use prelude.prelude.Intrinsic
  
  function shallow_model'2 (self : slice int32) : Seq.seq int32 =
    [%#span17] shallow_model'3 self
  
  let rec into_vec'0 (self:slice int32) (return'  (ret:Vec'0.t_Vec int32 (Global'0.t_Global)))= {[@expl:precondition] [%#span18] inv'3 self}
    any
    [ return' (result:Vec'0.t_Vec int32 (Global'0.t_Global))-> {[%#span20] inv'2 result}
      {[%#span19] shallow_model'1 result = shallow_model'2 self}
      (! return' {result}) ]
    
  
  use seq.Seq
  
  function index_logic'0 [@inline:trivial] (self : Vec'0.t_Vec int32 (Global'0.t_Global)) (ix : int) : int32 =
    [%#span21] Seq.get (shallow_model'1 self) ix
  
  let rec from_elem'0 (elem:int32) (n:usize) (return'  (ret:Vec'0.t_Vec int32 (Global'0.t_Global)))= {[@expl:precondition] [%#span22] inv'1 elem}
    any
    [ return' (result:Vec'0.t_Vec int32 (Global'0.t_Global))-> {[%#span25] inv'2 result}
      {[%#span24] forall i : int . 0 <= i /\ i < UIntSize.to_int n  -> index_logic'0 result i = elem}
      {[%#span23] Seq.length (shallow_model'1 result) = UIntSize.to_int n}
      (! return' {result}) ]
    
  
  let rec new'0 (_1:()) (return'  (ret:Vec'0.t_Vec uint32 (Global'0.t_Global)))= any
    [ return' (result:Vec'0.t_Vec uint32 (Global'0.t_Global))-> {[%#span27] inv'0 result}
      {[%#span26] Seq.length (shallow_model'0 result) = 0}
      (! return' {result}) ]
    
  
  meta "compute_max_steps" 1000000
  
  let rec x (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 = new'0 {[%#slib0] ()} (fun (_ret':Vec'0.t_Vec uint32 (Global'0.t_Global)) ->  [ &v0 <- _ret' ] s1)
      | s1 = bb1 ]
      
    | bb1 = s0 [ s0 = {[@expl:assertion] [%#s13_vec_macro1] Seq.length (shallow_model'0 v0) = 0} s1 | s1 = bb2 ] 
    | bb2 = s0
      [ s0 = from_elem'0 {[%#s13_vec_macro2] (0 : int32)} {[%#s13_vec_macro3] (2 : usize)}
          (fun (_ret':Vec'0.t_Vec int32 (Global'0.t_Global)) ->  [ &v1 <- _ret' ] s1)
      | s1 = bb3 ]
      
    | bb3 = s0 [ s0 = {[@expl:assertion] [%#s13_vec_macro4] Seq.length (shallow_model'1 v1) = 2} s1 | s1 = bb4 ] 
    | bb4 = s0
      [ s0 = any
        [ any_ (__arr_temp:array int32)-> (! -{Seq.get __arr_temp.elts 0 = ([%#s13_vec_macro5] (1 : int32))
          /\ Seq.get __arr_temp.elts 1 = ([%#s13_vec_macro6] (2 : int32))
          /\ Seq.get __arr_temp.elts 2 = ([%#s13_vec_macro7] (3 : int32)) /\ Seq.length __arr_temp.elts = 3}-
           [ &_10 <- __arr_temp ] 
          s1) ]
        
      | s1 = bb5 ]
      
    | bb5 = bb6
    | bb6 = s0
      [ s0 = into_vec'0 {_10} (fun (_ret':Vec'0.t_Vec int32 (Global'0.t_Global)) ->  [ &v2 <- _ret' ] s1) | s1 = bb7 ]
      
    | bb7 = s0 [ s0 = {[@expl:assertion] [%#s13_vec_macro8] Seq.length (shallow_model'1 v2) = 3} s1 | s1 = bb8 ] 
    | bb8 = bb9
    | bb9 = bb10
    | bb10 = bb11
    | bb11 = return' {_0} ]
    )
    [ & _0 : () = any_l ()
    | & v0 : Vec'0.t_Vec uint32 (Global'0.t_Global) = any_l ()
    | & v1 : Vec'0.t_Vec int32 (Global'0.t_Global) = any_l ()
    | & v2 : Vec'0.t_Vec int32 (Global'0.t_Global) = any_l ()
    | & _10 : array int32 = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
