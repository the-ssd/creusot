
module M_inc_max_repeat__take_max [#"../inc_max_repeat.rs" 6 0 6 64]
  let%span sinc_max_repeat0 = "../inc_max_repeat.rs" 4 0 5 56
  let%span span1 = "../../../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Int
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.UInt32
  
  predicate resolve'1 (self : borrowed uint32) =
    [%#span1] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed uint32) =
    resolve'1 _1
  
  meta "compute_max_steps" 1000000
  
  let rec take_max (ma:borrowed uint32) (mb:borrowed uint32) (return'  (ret:borrowed uint32))= (! bb0
    [ bb0 = s0
      [ s0 = UInt32.ge {ma.current} {mb.current} (fun (_ret':bool) ->  [ &_6 <- _ret' ] s1)
      | s1 = any [ br0 -> {_6 = false} (! bb2) | br1 -> {_6} (! bb1) ]  ]
      
    | bb1 = s0
      [ s0 = -{resolve'0 mb}- s1
      | s1 = Borrow.borrow_final <uint32> {ma.current} {Borrow.get_id ma}
          (fun (_ret':borrowed uint32) ->  [ &_9 <- _ret' ]  [ &ma <- { ma with current = _ret'.final ; } ] s2)
      | s2 = Borrow.borrow_final <uint32> {_9.current} {Borrow.get_id _9}
          (fun (_ret':borrowed uint32) ->  [ &_5 <- _ret' ]  [ &_9 <- { _9 with current = _ret'.final ; } ] s3)
      | s3 = -{resolve'0 _9}- s4
      | s4 = bb3 ]
      
    | bb2 = s0
      [ s0 = -{resolve'0 ma}- s1
      | s1 = Borrow.borrow_final <uint32> {mb.current} {Borrow.get_id mb}
          (fun (_ret':borrowed uint32) ->  [ &_5 <- _ret' ]  [ &mb <- { mb with current = _ret'.final ; } ] s2)
      | s2 = bb3 ]
      
    | bb3 = s0
      [ s0 = Borrow.borrow_final <uint32> {_5.current} {Borrow.get_id _5}
          (fun (_ret':borrowed uint32) ->  [ &_3 <- _ret' ]  [ &_5 <- { _5 with current = _ret'.final ; } ] s1)
      | s1 = Borrow.borrow_final <uint32> {_3.current} {Borrow.get_id _3}
          (fun (_ret':borrowed uint32) ->  [ &_0 <- _ret' ]  [ &_3 <- { _3 with current = _ret'.final ; } ] s2)
      | s2 = -{resolve'0 _5}- s3
      | s3 = -{resolve'0 _3}- s4
      | s4 = -{resolve'0 mb}- s5
      | s5 = -{resolve'0 ma}- s6
      | s6 = return' {_0} ]
       ]
    )
    [ & _0 : borrowed uint32 = any_l ()
    | & ma : borrowed uint32 = ma
    | & mb : borrowed uint32 = mb
    | & _3 : borrowed uint32 = any_l ()
    | & _5 : borrowed uint32 = any_l ()
    | & _6 : bool = any_l ()
    | & _9 : borrowed uint32 = any_l () ]
    
    [ return' (result:borrowed uint32)-> {[@expl:postcondition] [%#sinc_max_repeat0] if ma.current >= mb.current then
        mb.current = mb.final /\ result = ma
      else
        ma.current = ma.final /\ result = mb
      }
      (! return' {result}) ]
    
end
module T_core__ops__range__Range
  type t_Range 'idx =
    | C_Range 'idx 'idx
  
  function any_l (_ : 'b) : 'a
  
  let rec t_Range < 'idx > (input:t_Range 'idx) (ret  (start:'idx) (end':'idx))= any
    [ good (start:'idx) (end':'idx)-> {C_Range start end' = input} (! ret {start} {end'}) ]
    
  
  function t_Range__end (self : t_Range 'idx) : 'idx =
    match self with
      | C_Range _ a -> a
      end
  
  function t_Range__start (self : t_Range 'idx) : 'idx =
    match self with
      | C_Range a _ -> a
      end
end
module T_core__option__Option
  type t_Option 't =
    | C_None
    | C_Some 't
  
  function any_l (_ : 'b) : 'a
  
  let rec v_None < 't > (input:t_Option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} (! {false} any) ]
    
  
  let rec v_Some < 't > (input:t_Option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : 't [C_Some field_0 : t_Option 't] . C_Some field_0 <> input} (! {false} any) ]
    
end
module T_alloc__alloc__Global
  type t_Global  =
    | C_Global
  
  function any_l (_ : 'b) : 'a
  
  let rec t_Global (input:t_Global) (ret  )= any [ good -> {C_Global  = input} (! ret) ] 
end
module M_inc_max_repeat__inc_max_repeat [#"../inc_max_repeat.rs" 15 0 15 53]
  let%span sinc_max_repeat0 = "../inc_max_repeat.rs" 18 13 18 14
  let%span sinc_max_repeat1 = "../inc_max_repeat.rs" 16 4 16 86
  let%span sinc_max_repeat2 = "../inc_max_repeat.rs" 16 4 16 86
  let%span sinc_max_repeat3 = "../inc_max_repeat.rs" 16 4 16 86
  let%span sinc_max_repeat4 = "../inc_max_repeat.rs" 16 16 16 84
  let%span sinc_max_repeat5 = "../inc_max_repeat.rs" 17 16 17 70
  let%span sinc_max_repeat6 = "../inc_max_repeat.rs" 16 4 16 86
  let%span sinc_max_repeat7 = "../inc_max_repeat.rs" 20 15 20 16
  let%span sinc_max_repeat8 = "../inc_max_repeat.rs" 22 4 22 37
  let%span sinc_max_repeat9 = "../inc_max_repeat.rs" 14 11 14 70
  let%span span10 = "../../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  let%span span11 = "../../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span span12 = "../../../../../creusot-contracts/src/std/num.rs" 22 16 22 35
  let%span span13 = "../../../../../creusot-contracts/src/std/iter/range.rs" 22 8 28 9
  let%span span14 = "../../../../../creusot-contracts/src/std/iter/range.rs" 39 15 39 21
  let%span span15 = "../../../../../creusot-contracts/src/std/iter/range.rs" 40 15 40 21
  let%span span16 = "../../../../../creusot-contracts/src/std/iter/range.rs" 41 15 41 21
  let%span span17 = "../../../../../creusot-contracts/src/std/iter/range.rs" 42 15 42 32
  let%span span18 = "../../../../../creusot-contracts/src/std/iter/range.rs" 43 15 43 32
  let%span span19 = "../../../../../creusot-contracts/src/std/iter/range.rs" 44 14 44 42
  let%span span20 = "../../../../../creusot-contracts/src/std/iter/range.rs" 33 15 33 24
  let%span span21 = "../../../../../creusot-contracts/src/std/iter/range.rs" 34 14 34 45
  let%span span22 = "../../../../../creusot-contracts/src/logic/seq.rs" 198 8 198 97
  let%span span23 = "../../../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  let%span span24 = "../inc_max_repeat.rs" 4 0 5 56
  let%span span25 = "../../../../../creusot-contracts/src/std/iter/range.rs" 15 12 15 78
  let%span span26 = "" 0 0 0 0
  let%span span27 = "../../../../../creusot-contracts/src/std/iter.rs" 105 26 108 17
  let%span span28 = "" 0 0 0 0
  let%span span29 = "../../../../../creusot-contracts/src/std/iter.rs" 90 8 90 19
  let%span span30 = "../../../../../creusot-contracts/src/std/iter.rs" 84 20 84 24
  let%span span31 = "../../../../../creusot-contracts/src/std/iter.rs" 99 0 212 1
  let%span span32 = "" 0 0 0 0
  let%span span33 = "" 0 0 0 0
  
  use prelude.prelude.UInt32
  
  predicate inv'5 (_1 : uint32)
  
  axiom inv'5 [@rewrite] : forall x : uint32 [inv'5 x] . inv'5 x = true
  
  use T_alloc__alloc__Global as Global'0
  
  predicate invariant'4 (self : uint32) =
    [%#span10] inv'5 self
  
  predicate inv'4 (_1 : uint32)
  
  axiom inv'4 [@rewrite] : forall x : uint32 [inv'4 x] . inv'4 x = true
  
  use T_core__option__Option as Option'0
  
  predicate inv'3 (_1 : Option'0.t_Option uint32)
  
  axiom inv'3 [@rewrite] : forall x : Option'0.t_Option uint32 [inv'3 x] . inv'3 x = true
  
  use T_core__ops__range__Range as Range'0
  
  predicate inv'1 (_1 : Range'0.t_Range uint32)
  
  use prelude.prelude.Borrow
  
  predicate invariant'2 (self : borrowed (Range'0.t_Range uint32)) =
    [%#span11] inv'1 self.current /\ inv'1 self.final
  
  predicate inv'2 (_1 : borrowed (Range'0.t_Range uint32))
  
  axiom inv'2 [@rewrite] : forall x : borrowed (Range'0.t_Range uint32) [inv'2 x] . inv'2 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use prelude.prelude.UInt32
  
  function deep_model'0 (self : uint32) : int =
    [%#span12] UInt32.to_int self
  
  use T_core__ops__range__Range as T_core__ops__range__Range
  
  predicate produces'0 (self : Range'0.t_Range uint32) (visited : Seq.seq uint32) (o : Range'0.t_Range uint32) =
    [%#span13] T_core__ops__range__Range.t_Range__end self = T_core__ops__range__Range.t_Range__end o
    /\ deep_model'0 (T_core__ops__range__Range.t_Range__start self)
    <= deep_model'0 (T_core__ops__range__Range.t_Range__start o)
    /\ (Seq.length visited > 0
     -> deep_model'0 (T_core__ops__range__Range.t_Range__start o)
    <= deep_model'0 (T_core__ops__range__Range.t_Range__end o))
    /\ Seq.length visited
    = deep_model'0 (T_core__ops__range__Range.t_Range__start o)
    - deep_model'0 (T_core__ops__range__Range.t_Range__start self)
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> deep_model'0 (Seq.get visited i) = deep_model'0 (T_core__ops__range__Range.t_Range__start self) + i)
  
  function produces_trans'0 (a : Range'0.t_Range uint32) (ab : Seq.seq uint32) (b : Range'0.t_Range uint32) (bc : Seq.seq uint32) (c : Range'0.t_Range uint32) : ()
    
  
  axiom produces_trans'0_spec : forall a : Range'0.t_Range uint32, ab : Seq.seq uint32, b : Range'0.t_Range uint32, bc : Seq.seq uint32, c : Range'0.t_Range uint32 . ([%#span14] inv'1 a)
   -> ([%#span15] inv'1 b)
   -> ([%#span16] inv'1 c)
   -> ([%#span17] produces'0 a ab b)  -> ([%#span18] produces'0 b bc c)  -> ([%#span19] produces'0 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'0 (self : Range'0.t_Range uint32) : ()
  
  axiom produces_refl'0_spec : forall self : Range'0.t_Range uint32 . ([%#span20] inv'1 self)
   -> ([%#span21] produces'0 self (Seq.empty  : Seq.seq uint32) self)
  
  axiom inv'1 [@rewrite] : forall x : Range'0.t_Range uint32 [inv'1 x] . inv'1 x = true
  
  use seq.Seq
  
  predicate invariant'0 (self : Seq.seq uint32) =
    [%#span22] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'4 (Seq.get self i)
  
  predicate inv'0 (_1 : Seq.seq uint32)
  
  axiom inv'0 [@rewrite] : forall x : Seq.seq uint32 [inv'0 x] . inv'0 x = true
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'3 (self : borrowed uint32) =
    [%#span23] self.final = self.current
  
  predicate resolve'1 (_1 : borrowed uint32) =
    resolve'3 _1
  
  let rec take_max'0 (ma:borrowed uint32) (mb:borrowed uint32) (return'  (ret:borrowed uint32))= any
    [ return' (result:borrowed uint32)-> {[%#span24] if ma.current >= mb.current then
        mb.current = mb.final /\ result = ma
      else
        ma.current = ma.final /\ result = mb
      }
      (! return' {result}) ]
    
  
  use seq.Seq
  
  predicate resolve'2 (self : borrowed (Range'0.t_Range uint32)) =
    [%#span23] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed (Range'0.t_Range uint32)) =
    resolve'2 _1
  
  predicate completed'0 (self : borrowed (Range'0.t_Range uint32)) =
    [%#span25] resolve'2 self
    /\ deep_model'0 (T_core__ops__range__Range.t_Range__start self.current)
    >= deep_model'0 (T_core__ops__range__Range.t_Range__end self.current)
  
  let rec next'0 (self:borrowed (Range'0.t_Range uint32)) (return'  (ret:Option'0.t_Option uint32))= {[@expl:precondition] [%#span26] inv'2 self}
    any
    [ return' (result:Option'0.t_Option uint32)-> {[%#span28] inv'3 result}
      {[%#span27] match result with
        | Option'0.C_None -> completed'0 self
        | Option'0.C_Some v -> produces'0 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
    
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  predicate into_iter_post'0 (self : Range'0.t_Range uint32) (res : Range'0.t_Range uint32) =
    [%#span29] self = res
  
  predicate into_iter_pre'0 (self : Range'0.t_Range uint32) =
    [%#span30] true
  
  let rec into_iter'0 (self:Range'0.t_Range uint32) (return'  (ret:Range'0.t_Range uint32))= {[@expl:precondition] [%#span32] inv'1 self}
    {[@expl:precondition] [%#span31] into_iter_pre'0 self}
    any
    [ return' (result:Range'0.t_Range uint32)-> {[%#span33] inv'1 result}
      {[%#span31] into_iter_post'0 self result}
      (! return' {result}) ]
    
  
  meta "compute_max_steps" 1000000
  
  let rec inc_max_repeat (a:uint32) (b:uint32) (n:uint32) (return'  (ret:()))= {[%#sinc_max_repeat9] a
    <= (1000000 : uint32)
    /\ b <= (1000000 : uint32) /\ n <= (1000000 : uint32)}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &_7 <- Range'0.C_Range ([%#sinc_max_repeat0] (0 : uint32)) n ] s1
      | s1 = into_iter'0 {_7} (fun (_ret':Range'0.t_Range uint32) ->  [ &iter <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = s0 [ s0 =  [ &iter_old <- [%#sinc_max_repeat1] Snapshot.new iter ] s1 | s1 = bb2 ] 
    | bb2 = s0 [ s0 =  [ &produced <- [%#sinc_max_repeat2] Snapshot.new (Seq.empty  : Seq.seq uint32) ] s1 | s1 = bb3 ] 
    | bb3 = bb4
    | bb4 = bb4
      [ bb4 = {[@expl:loop invariant] [%#sinc_max_repeat5] UInt32.to_int a
        >= UInt32.to_int b + Seq.length (Snapshot.inner produced)
        \/ UInt32.to_int b >= UInt32.to_int a + Seq.length (Snapshot.inner produced)}
        {[@expl:loop invariant] [%#sinc_max_repeat4] UInt32.to_int a <= 1000000 + Seq.length (Snapshot.inner produced)
        /\ UInt32.to_int b <= 1000000 + Seq.length (Snapshot.inner produced)}
        {[@expl:loop invariant] [%#sinc_max_repeat3] produces'0 (Snapshot.inner iter_old) (Snapshot.inner produced) iter}
        {[@expl:loop invariant] [%#sinc_max_repeat3] inv'1 iter}
        {[@expl:loop invariant] [%#sinc_max_repeat3] inv'0 (Snapshot.inner produced)}
        (! s0) [ s0 = bb5 ] 
        [ bb5 = s0
          [ s0 = Borrow.borrow_mut <Range'0.t_Range uint32> {iter}
              (fun (_ret':borrowed (Range'0.t_Range uint32)) ->  [ &_21 <- _ret' ]  [ &iter <- _ret'.final ] s1)
          | s1 = Borrow.borrow_final <Range'0.t_Range uint32> {_21.current} {Borrow.get_id _21}
              (fun (_ret':borrowed (Range'0.t_Range uint32)) ->
                 [ &_20 <- _ret' ] 
                 [ &_21 <- { _21 with current = _ret'.final ; } ] 
                s2)
          | s2 = next'0 {_20} (fun (_ret':Option'0.t_Option uint32) ->  [ &_19 <- _ret' ] s3)
          | s3 = bb6 ]
          
        | bb6 = s0
          [ s0 = -{resolve'0 _21}- s1
          | s1 = any [ br0 -> {_19 = Option'0.C_None } (! bb9) | br1 (a:uint32)-> {_19 = Option'0.C_Some a} (! bb8) ]  ]
          
        | bb8 = bb10
        | bb10 = s0
          [ s0 = Option'0.v_Some <uint32> {_19} (fun (r0'0:uint32) ->  [ &__creusot_proc_iter_elem <- r0'0 ] s1)
          | s1 = 
            [ &_24 <- [%#sinc_max_repeat6] Snapshot.new (Seq.(++) (Snapshot.inner produced) (Seq.singleton __creusot_proc_iter_elem)) ]
            
            s2
          | s2 = bb11 ]
          
        | bb11 = s0
          [ s0 =  [ &produced <- _24 ] s1
          | s1 = Borrow.borrow_mut <uint32> {a}
              (fun (_ret':borrowed uint32) ->  [ &_28 <- _ret' ]  [ &a <- _ret'.final ] s2)
          | s2 = Borrow.borrow_final <uint32> {_28.current} {Borrow.get_id _28}
              (fun (_ret':borrowed uint32) ->  [ &_27 <- _ret' ]  [ &_28 <- { _28 with current = _ret'.final ; } ] s3)
          | s3 = Borrow.borrow_mut <uint32> {b}
              (fun (_ret':borrowed uint32) ->  [ &_30 <- _ret' ]  [ &b <- _ret'.final ] s4)
          | s4 = Borrow.borrow_final <uint32> {_30.current} {Borrow.get_id _30}
              (fun (_ret':borrowed uint32) ->  [ &_29 <- _ret' ]  [ &_30 <- { _30 with current = _ret'.final ; } ] s5)
          | s5 = take_max'0 {_27} {_29} (fun (_ret':borrowed uint32) ->  [ &mc <- _ret' ] s6)
          | s6 = bb12 ]
          
        | bb12 = s0
          [ s0 = -{resolve'1 _30}- s1
          | s1 = -{resolve'1 _28}- s2
          | s2 = UInt32.add {mc.current} {[%#sinc_max_repeat7] (1 : uint32)}
              (fun (_ret':uint32) ->  [ &mc <- { mc with current = _ret' ; } ] s3)
          | s3 = -{resolve'1 mc}- s4
          | s4 = bb4 ]
           ]
         ]
      
    | bb9 = s0
      [ s0 = UInt32.add {b} {n} (fun (_ret':uint32) ->  [ &_35 <- _ret' ] s1)
      | s1 = UInt32.ge {a} {_35} (fun (_ret':bool) ->  [ &_33 <- _ret' ] s2)
      | s2 = any [ br0 -> {_33 = false} (! bb14) | br1 -> {_33} (! bb13) ]  ]
      
    | bb13 = bb17
    | bb14 = s0
      [ s0 = UInt32.add {a} {n} (fun (_ret':uint32) ->  [ &_40 <- _ret' ] s1)
      | s1 = UInt32.ge {b} {_40} (fun (_ret':bool) ->  [ &_38 <- _ret' ] s2)
      | s2 = any [ br0 -> {_38 = false} (! bb16) | br1 -> {_38} (! bb15) ]  ]
      
    | bb15 = bb17
    | bb17 = return' {_0}
    | bb16 = {[%#sinc_max_repeat8] false} any ]
    )
    [ & _0 : () = any_l ()
    | & a : uint32 = a
    | & b : uint32 = b
    | & n : uint32 = n
    | & iter : Range'0.t_Range uint32 = any_l ()
    | & _7 : Range'0.t_Range uint32 = any_l ()
    | & iter_old : Snapshot.snap_ty (Range'0.t_Range uint32) = any_l ()
    | & produced : Snapshot.snap_ty (Seq.seq uint32) = any_l ()
    | & _19 : Option'0.t_Option uint32 = any_l ()
    | & _20 : borrowed (Range'0.t_Range uint32) = any_l ()
    | & _21 : borrowed (Range'0.t_Range uint32) = any_l ()
    | & __creusot_proc_iter_elem : uint32 = any_l ()
    | & _24 : Snapshot.snap_ty (Seq.seq uint32) = any_l ()
    | & mc : borrowed uint32 = any_l ()
    | & _27 : borrowed uint32 = any_l ()
    | & _28 : borrowed uint32 = any_l ()
    | & _29 : borrowed uint32 = any_l ()
    | & _30 : borrowed uint32 = any_l ()
    | & _33 : bool = any_l ()
    | & _35 : uint32 = any_l ()
    | & _38 : bool = any_l ()
    | & _40 : uint32 = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
